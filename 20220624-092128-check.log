rtl::libreoffice_internal::ConstCharArrayDetector<char const [33], void>::length = 32
        com::sun::star::task::InteractionClassification::InteractionClassification_INFO = com::sun::star::task::InteractionClassification::InteractionClassification_INFO
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::round_toward_infinity = std::round_toward_infinity
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_DIRECTORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_DIRECTORY   
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_LENGTH = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_LENGTH
        com::sun::star::ucb::IOErrorCode::IOErrorCode_UNKNOWN = com::sun::star::ucb::IOErrorCode::IOErrorCode_UNKNOWN
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
        std::memory_order_release = std::memory_order_release
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_WRITE = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_WRITE       
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_FILE = com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_FILE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::ucb::IOErrorCode::IOErrorCode_ALREADY_EXISTING = com::sun::star::ucb::IOErrorCode::IOErrorCode_ALREADY_EXISTING
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        com::sun::star::ucb::IOErrorCode::IOErrorCode_MISPLACED_CHARACTER = com::sun::star::ucb::IOErrorCode::IOErrorCode_MISPLACED_CHARACTER
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_READ = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_READ
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::task::InteractionClassification::InteractionClassification_MAKE_FIXED_SIZE = com::sun::star::task::InteractionClassification::InteractionClassification_MAKE_FIXED_SIZE
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::memory_order_relaxed = std::memory_order_relaxed
        com::sun::star::ucb::IOErrorCode::IOErrorCode_RECURSIVE = com::sun::star::ucb::IOErrorCode::IOErrorCode_RECURSIVE
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::Sequence<com::sun::star::uno::Any>::s_pType = 0x0
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        std::is_same_v<char32_t, char32_t> = true
        com::sun::star::task::InteractionClassification::InteractionClassification_WARNING = com::sun::star::task::InteractionClassification::InteractionClassification_WARNING
        std::is_same_v<char32_t, char32_t> = true
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        com::sun::star::ucb::IOErrorCode::IOErrorCode_PENDING = com::sun::star::ucb::IOErrorCode::IOErrorCode_PENDING
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::is_array_v<wchar_t> = false
        std::is_array_v<wchar_t> = false
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        std::is_same_v<wchar_t, wchar_t> = true
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<cppuhelper::detail::XExceptionThrower, com::sun::star::uno::XInterface> = false
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        std::is_same_v<cppuhelper::detail::XExceptionThrower, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        com::sun::star::ucb::IOErrorCode::IOErrorCode_DEVICE_NOT_READY = com::sun::star::ucb::IOErrorCode::IOErrorCode_DEVICE_NOT_READY
        std::__numeric_limits_base::has_quiet_NaN = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::has_quiet_NaN = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_denorm_loss = false
        com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_DISK_SPACE = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_DISK_SPACE
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NAME_TOO_LONG = com::sun::star::ucb::IOErrorCode::IOErrorCode_NAME_TOO_LONG 
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_array_v<char16_t> = false
        std::is_array_v<char16_t> = false
        std::is_standard_layout_v<wchar_t> = true
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_standard_layout_v<wchar_t> = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_PARAMETER = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_PARAMETER
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING_PATH = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING_PATH
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_DEVICE = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_DEVICE
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING   
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_VERSION = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_VERSION 
        std::is_standard_layout_v<char> = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        SAL_DETAIL_LOG_LEVEL_WARN = SAL_DETAIL_LOG_LEVEL_WARN
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        com::sun::star::ucb::IOErrorCode::IOErrorCode_WRITE_PROTECTED = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRITE_PROTECTED
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::round_toward_zero = std::round_toward_zero
        SAL_DETAIL_LOG_LEVEL_DEBUG = SAL_DETAIL_LOG_LEVEL_DEBUG
        com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_ACCESS = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_ACCESS
        com::sun::star::ucb::IOErrorCode::IOErrorCode_LOCKING_VIOLATION = com::sun::star::ucb::IOErrorCode::IOErrorCode_LOCKING_VIOLATION
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::is_array_v<char32_t> = false
        std::is_array_v<char32_t> = false
        std::round_indeterminate = std::round_indeterminate
        com::sun::star::ucb::IOErrorCode::IOErrorCode_ABORT = com::sun::star::ucb::IOErrorCode::IOErrorCode_ABORT
        com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_FORMAT = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_FORMAT   
        std::denorm_present = std::denorm_present
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
#4  0x00ffffff90c05f32 in cppu::getCaughtException() () at /home/infinity/libreoffice/cppuhelper/source/exc_thrower.cxx:293       
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::ucb::IOErrorCode_NOT_EXISTING = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING
        com::sun::star::ucb::IOErrorCode_NOT_EXISTING = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::ucb::IOErrorCode_CURRENT_DIRECTORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_CURRENT_DIRECTORY      
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::ucb::IOErrorCode_CURRENT_DIRECTORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_CURRENT_DIRECTORY      
        com::sun::star::ucb::IOErrorCode_OUT_OF_FILE_HANDLES = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_FILE_HANDLES  
        com::sun::star::ucb::IOErrorCode_OUT_OF_FILE_HANDLES = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_FILE_HANDLES  
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::ucb::IOErrorCode_DIFFERENT_DEVICES = com::sun::star::ucb::IOErrorCode::IOErrorCode_DIFFERENT_DEVICES
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::ucb::IOErrorCode_DIFFERENT_DEVICES = com::sun::star::ucb::IOErrorCode::IOErrorCode_DIFFERENT_DEVICES      
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::ucb::IOErrorCode_NO_FILE = com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_FILE
        com::sun::star::ucb::IOErrorCode_NO_FILE = com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_FILE
        com::sun::star::ucb::IOErrorCode_GENERAL = com::sun::star::ucb::IOErrorCode::IOErrorCode_GENERAL
        com::sun::star::ucb::IOErrorCode_INVALID_CHARACTER = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_CHARACTER      
        com::sun::star::ucb::IOErrorCode_GENERAL = com::sun::star::ucb::IOErrorCode::IOErrorCode_GENERAL
        com::sun::star::ucb::IOErrorCode_INVALID_CHARACTER = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_CHARACTER      
        com::sun::star::ucb::IOErrorCode_NO_DIRECTORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_DIRECTORY
        com::sun::star::ucb::IOErrorCode_NO_DIRECTORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_DIRECTORY
        com::sun::star::task::InteractionClassification_QUERY = com::sun::star::task::InteractionClassification::InteractionClassification_QUERY
        com::sun::star::task::InteractionClassification_QUERY = com::sun::star::task::InteractionClassification::InteractionClassification_QUERY
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::ucb::IOErrorCode_INVALID_LENGTH = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_LENGTH
        com::sun::star::ucb::IOErrorCode_INVALID_LENGTH = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_LENGTH
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::ucb::IOErrorCode_CANT_WRITE = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_WRITE
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::ucb::IOErrorCode_CANT_WRITE = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_WRITE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::ucb::IOErrorCode_ABORT = com::sun::star::ucb::IOErrorCode::IOErrorCode_ABORT
        com::sun::star::ucb::IOErrorCode_WRITE_PROTECTED = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRITE_PROTECTED
        com::sun::star::ucb::IOErrorCode_ABORT = com::sun::star::ucb::IOErrorCode::IOErrorCode_ABORT
        com::sun::star::ucb::IOErrorCode_WRITE_PROTECTED = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRITE_PROTECTED
        com::sun::star::ucb::IOErrorCode_ALREADY_EXISTING = com::sun::star::ucb::IOErrorCode::IOErrorCode_ALREADY_EXISTING        
        com::sun::star::ucb::IOErrorCode_UNKNOWN = com::sun::star::ucb::IOErrorCode::IOErrorCode_UNKNOWN
        com::sun::star::ucb::IOErrorCode_ALREADY_EXISTING = com::sun::star::ucb::IOErrorCode::IOErrorCode_ALREADY_EXISTING        
        com::sun::star::ucb::IOErrorCode_UNKNOWN = com::sun::star::ucb::IOErrorCode::IOErrorCode_UNKNOWN
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::ucb::IOErrorCode_NOT_SUPPORTED = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_SUPPORTED
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::ucb::IOErrorCode_NOT_SUPPORTED = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_SUPPORTED
        com::sun::star::ucb::IOErrorCode_MISPLACED_CHARACTER = com::sun::star::ucb::IOErrorCode::IOErrorCode_MISPLACED_CHARACTER  
        com::sun::star::ucb::IOErrorCode_MISPLACED_CHARACTER = com::sun::star::ucb::IOErrorCode::IOErrorCode_MISPLACED_CHARACTER  
        com::sun::star::ucb::IOErrorCode_OUT_OF_MEMORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_MEMORY
        com::sun::star::ucb::IOErrorCode_RECURSIVE = com::sun::star::ucb::IOErrorCode::IOErrorCode_RECURSIVE
        com::sun::star::ucb::IOErrorCode_WRONG_FORMAT = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_FORMAT
        com::sun::star::ucb::IOErrorCode_OUT_OF_MEMORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_MEMORY
        com::sun::star::ucb::IOErrorCode_RECURSIVE = com::sun::star::ucb::IOErrorCode::IOErrorCode_RECURSIVE
        com::sun::star::ucb::IOErrorCode_WRONG_FORMAT = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_FORMAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::ucb::IOErrorCode_IS_WILDCARD = com::sun::star::ucb::IOErrorCode::IOErrorCode_IS_WILDCARD
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::ucb::IOErrorCode_IS_WILDCARD = com::sun::star::ucb::IOErrorCode::IOErrorCode_IS_WILDCARD
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::ucb::IOErrorCode_CANT_SEEK = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_SEEK
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::ucb::IOErrorCode_CANT_SEEK = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_SEEK
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::ucb::IOErrorCode_ACCESS_DENIED = com::sun::star::ucb::IOErrorCode::IOErrorCode_ACCESS_DENIED
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::ucb::IOErrorCode_ACCESS_DENIED = com::sun::star::ucb::IOErrorCode::IOErrorCode_ACCESS_DENIED
        com::sun::star::ucb::IOErrorCode_OUT_OF_DISK_SPACE = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_DISK_SPACE      
        com::sun::star::ucb::IOErrorCode_OUT_OF_DISK_SPACE = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_DISK_SPACE      
        com::sun::star::ucb::IOErrorCode_CANT_TELL = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_TELL
        com::sun::star::ucb::IOErrorCode_CANT_TELL = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_TELL
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::ucb::IOErrorCode_NOT_EXISTING_PATH = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING_PATH      
        com::sun::star::ucb::IOErrorCode_NOT_EXISTING_PATH = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING_PATH      
        com::sun::star::ucb::IOErrorCode_CANT_CREATE = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_CREATE
        com::sun::star::ucb::IOErrorCode_CANT_CREATE = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_CREATE
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::ucb::IOErrorCode_INVALID_PARAMETER = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_PARAMETER      
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::ucb::IOErrorCode_INVALID_PARAMETER = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_PARAMETER      
        com::sun::star::ucb::IOErrorCode_INVALID_DEVICE = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_DEVICE
        com::sun::star::ucb::IOErrorCode_INVALID_DEVICE = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_DEVICE
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::task::InteractionClassification_INFO = com::sun::star::task::InteractionClassification::InteractionClassification_INFO
        com::sun::star::ucb::IOErrorCode_NAME_TOO_LONG = com::sun::star::ucb::IOErrorCode::IOErrorCode_NAME_TOO_LONG
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::task::InteractionClassification_INFO = com::sun::star::task::InteractionClassification::InteractionClassification_INFO
        com::sun::star::ucb::IOErrorCode_NAME_TOO_LONG = com::sun::star::ucb::IOErrorCode::IOErrorCode_NAME_TOO_LONG
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::ucb::IOErrorCode_WRONG_VERSION = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_VERSION
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::ucb::IOErrorCode_WRONG_VERSION = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_VERSION
        com::sun::star::ucb::IOErrorCode_BAD_CRC = com::sun::star::ucb::IOErrorCode::IOErrorCode_BAD_CRC
        com::sun::star::ucb::IOErrorCode_DEVICE_NOT_READY = com::sun::star::ucb::IOErrorCode::IOErrorCode_DEVICE_NOT_READY        
        com::sun::star::ucb::IOErrorCode_BAD_CRC = com::sun::star::ucb::IOErrorCode::IOErrorCode_BAD_CRC
        com::sun::star::ucb::IOErrorCode_DEVICE_NOT_READY = com::sun::star::ucb::IOErrorCode::IOErrorCode_DEVICE_NOT_READY        
        com::sun::star::task::InteractionClassification_ERROR = com::sun::star::task::InteractionClassification::InteractionClassification_ERROR
        com::sun::star::ucb::IOErrorCode_INVALID_ACCESS = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_ACCESS
        com::sun::star::task::InteractionClassification_ERROR = com::sun::star::task::InteractionClassification::InteractionClassification_ERROR
        com::sun::star::ucb::IOErrorCode_INVALID_ACCESS = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_ACCESS
        com::sun::star::ucb::IOErrorCode_LOCKING_VIOLATION = com::sun::star::ucb::IOErrorCode::IOErrorCode_LOCKING_VIOLATION      
        com::sun::star::ucb::IOErrorCode_LOCKING_VIOLATION = com::sun::star::ucb::IOErrorCode::IOErrorCode_LOCKING_VIOLATION      
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::ucb::IOErrorCode_CANT_READ = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_READ
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::ucb::IOErrorCode_CANT_READ = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_READ
        com::sun::star::ucb::IOErrorCode_PENDING = com::sun::star::ucb::IOErrorCode::IOErrorCode_PENDING
        com::sun::star::ucb::IOErrorCode_PENDING = com::sun::star::ucb::IOErrorCode::IOErrorCode_PENDING
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::task::InteractionClassification_WARNING = com::sun::star::task::InteractionClassification::InteractionClassification_WARNING
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::task::InteractionClassification_WARNING = com::sun::star::task::InteractionClassification::InteractionClassification_WARNING
        std::memory_order_consume = std::memory_order_consume
        com::sun::star::ucb::IOErrorCode::IOErrorCode_GENERAL = com::sun::star::ucb::IOErrorCode::IOErrorCode_GENERAL
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::ucb::IOErrorCode::IOErrorCode_CURRENT_DIRECTORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_CURRENT_DIRECTORY
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        std::round_to_nearest = std::round_to_nearest
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        com::sun::star::ucb::IOErrorCode::IOErrorCode_ACCESS_DENIED = com::sun::star::ucb::IOErrorCode::IOErrorCode_ACCESS_DENIED 
        com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_SEEK = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_SEEK
        com::sun::star::ucb::IOErrorCode::IOErrorCode_DIFFERENT_DEVICES = com::sun::star::ucb::IOErrorCode::IOErrorCode_DIFFERENT_DEVICES
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [4], void>::ok = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__are_same<char*, char*>::__value = std::__are_same<char*, char*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_CREATE = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_CREATE     
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_MEMORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_MEMORY 
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        std::is_trivial_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_trivial_v<char> = true
        std::memory_order_acquire = std::memory_order_acquire
        com::sun::star::ucb::IOErrorCode::IOErrorCode_BAD_CRC = com::sun::star::ucb::IOErrorCode::IOErrorCode_BAD_CRC
        com::sun::star::ucb::IOErrorCode::IOErrorCode_MAKE_FIXED_SIZE = com::sun::star::ucb::IOErrorCode::IOErrorCode_MAKE_FIXED_SIZE
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        SAL_DETAIL_LOG_LEVEL_INFO = SAL_DETAIL_LOG_LEVEL_INFO
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        com::sun::star::task::InteractionClassification::InteractionClassification_ERROR = com::sun::star::task::InteractionClassification::InteractionClassification_ERROR
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_SUPPORTED = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_SUPPORTED 
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        com::sun::star::ucb::IOErrorCode::IOErrorCode_IS_WILDCARD = com::sun::star::ucb::IOErrorCode::IOErrorCode_IS_WILDCARD     
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_TELL = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_TELL
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_FILE_HANDLES = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_FILE_HANDLES
        com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_CHARACTER = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_CHARACTER
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::task::InteractionClassification::InteractionClassification_QUERY = com::sun::star::task::InteractionClassification::InteractionClassification_QUERY
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [4], void>::length = 3
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [52], void>::length = 51
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [54], void>::length = 53
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [27], void>::length = 26
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [17], void>::length = 16
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [78], void>::length = 77
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [38], void>::length = 37
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [33], void>::length = 32
        com::sun::star::task::InteractionClassification::InteractionClassification_INFO = com::sun::star::task::InteractionClassification::InteractionClassification_INFO
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::round_toward_infinity = std::round_toward_infinity
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_DIRECTORY = com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_DIRECTORY   
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_LENGTH = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_LENGTH
        com::sun::star::ucb::IOErrorCode::IOErrorCode_UNKNOWN = com::sun::star::ucb::IOErrorCode::IOErrorCode_UNKNOWN
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
        std::memory_order_release = std::memory_order_release
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_WRITE = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_WRITE       
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_FILE = com::sun::star::ucb::IOErrorCode::IOErrorCode_NO_FILE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::ucb::IOErrorCode::IOErrorCode_ALREADY_EXISTING = com::sun::star::ucb::IOErrorCode::IOErrorCode_ALREADY_EXISTING
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        com::sun::star::ucb::IOErrorCode::IOErrorCode_MISPLACED_CHARACTER = com::sun::star::ucb::IOErrorCode::IOErrorCode_MISPLACED_CHARACTER
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_READ = com::sun::star::ucb::IOErrorCode::IOErrorCode_CANT_READ
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::task::InteractionClassification::InteractionClassification_MAKE_FIXED_SIZE = com::sun::star::task::InteractionClassification::InteractionClassification_MAKE_FIXED_SIZE
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::memory_order_relaxed = std::memory_order_relaxed
        com::sun::star::ucb::IOErrorCode::IOErrorCode_RECURSIVE = com::sun::star::ucb::IOErrorCode::IOErrorCode_RECURSIVE
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::Sequence<com::sun::star::uno::Any>::s_pType = 0x0
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        std::is_same_v<char32_t, char32_t> = true
        com::sun::star::task::InteractionClassification::InteractionClassification_WARNING = com::sun::star::task::InteractionClassification::InteractionClassification_WARNING
        std::is_same_v<char32_t, char32_t> = true
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        com::sun::star::ucb::IOErrorCode::IOErrorCode_PENDING = com::sun::star::ucb::IOErrorCode::IOErrorCode_PENDING
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::is_array_v<wchar_t> = false
        std::is_array_v<wchar_t> = false
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        std::is_same_v<wchar_t, wchar_t> = true
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<cppuhelper::detail::XExceptionThrower, com::sun::star::uno::XInterface> = false
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        std::is_same_v<cppuhelper::detail::XExceptionThrower, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        com::sun::star::ucb::IOErrorCode::IOErrorCode_DEVICE_NOT_READY = com::sun::star::ucb::IOErrorCode::IOErrorCode_DEVICE_NOT_READY
        std::__numeric_limits_base::has_quiet_NaN = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::has_quiet_NaN = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_denorm_loss = false
        com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_DISK_SPACE = com::sun::star::ucb::IOErrorCode::IOErrorCode_OUT_OF_DISK_SPACE
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NAME_TOO_LONG = com::sun::star::ucb::IOErrorCode::IOErrorCode_NAME_TOO_LONG 
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_array_v<char16_t> = false
        std::is_array_v<char16_t> = false
        std::is_standard_layout_v<wchar_t> = true
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_standard_layout_v<wchar_t> = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_PARAMETER = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_PARAMETER
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING_PATH = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING_PATH
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_DEVICE = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_DEVICE
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING = com::sun::star::ucb::IOErrorCode::IOErrorCode_NOT_EXISTING
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_VERSION = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_VERSION 
        std::is_standard_layout_v<char> = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        SAL_DETAIL_LOG_LEVEL_WARN = SAL_DETAIL_LOG_LEVEL_WARN
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        com::sun::star::ucb::IOErrorCode::IOErrorCode_WRITE_PROTECTED = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRITE_PROTECTED
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::round_toward_zero = std::round_toward_zero
        SAL_DETAIL_LOG_LEVEL_DEBUG = SAL_DETAIL_LOG_LEVEL_DEBUG
        com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_ACCESS = com::sun::star::ucb::IOErrorCode::IOErrorCode_INVALID_ACCESS
        com::sun::star::ucb::IOErrorCode::IOErrorCode_LOCKING_VIOLATION = com::sun::star::ucb::IOErrorCode::IOErrorCode_LOCKING_VIOLATION
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::is_array_v<char32_t> = false
        std::is_array_v<char32_t> = false
        std::round_indeterminate = std::round_indeterminate
        com::sun::star::ucb::IOErrorCode::IOErrorCode_ABORT = com::sun::star::ucb::IOErrorCode::IOErrorCode_ABORT
        com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_FORMAT = com::sun::star::ucb::IOErrorCode::IOErrorCode_WRONG_FORMAT   
        std::denorm_present = std::denorm_present
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
#5  0x00ffffff90c9ff96 in cppu::OWeakConnectionPoint::dispose() () at /home/infinity/libreoffice/cppuhelper/source/weak.cxx:139   
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        cppu::gpWeakMutex = 0xaaaaaac8389dc0
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        PTHREAD_MUTEX_ADAPTIVE_NP = PTHREAD_MUTEX_ADAPTIVE_NP
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<long, 1l>::value = 1
        std::integral_constant<long, 1000000000l>::value = 1000000000
        std::integral_constant<long, 1000l>::value = 1000
        std::integral_constant<long, 1000000l>::value = 1000000
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        SAL_DETAIL_LOG_ACTION_IGNORE = SAL_DETAIL_LOG_ACTION_IGNORE
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        std::round_toward_zero = std::round_toward_zero
        std::memory_order_acq_rel = std::memory_order_acq_rel
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::denorm_present = std::denorm_present
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [4], void>::length = 3
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [26], void>::length = 25
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [40], void>::length = 39
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [43], void>::length = 42
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [23], void>::length = 22
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [30], void>::length = 29
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [44], void>::length = 43
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [48], void>::length = 47
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [11], void>::length = 10
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [6], void>::length = 5
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_standard_layout_v<char> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::ratio<1, 1000000000>::num = 1
        std::ratio<1, 1>::num = 1
        std::ratio<3600, 1>::num = 3600
        std::ratio<60, 1>::num = 60
        std::ratio<1, 1000>::num = 1
        std::ratio<1, 1000000>::num = 1
        std::ratio<1000000000, 1>::num = 1000000000
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        std::ratio<1l, 1000000000l>::num = 1
        std::ratio<1l, 1l>::num = 1
        std::ratio<3600l, 1l>::num = 3600
        std::ratio<60l, 1l>::num = 60
        std::ratio<1l, 1000l>::num = 1
        std::ratio<1l, 1000000l>::num = 1
        std::ratio<1000000000l, 1l>::num = 1000000000
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::is_same_v<char, char> = true
        PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_TIMED_NP
        std::is_same_v<char, char> = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::memory_order_consume = std::memory_order_consume
        std::is_array_v<char> = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        std::is_array_v<char> = false
        SAL_DETAIL_LOG_LEVEL_WARN = SAL_DETAIL_LOG_LEVEL_WARN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<com::sun::star::uno::XAggregation, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAggregation, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        SAL_DETAIL_LOG_ACTION_FATAL = SAL_DETAIL_LOG_ACTION_FATAL
        std::memory_order_relaxed = std::memory_order_relaxed
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_array_v<char16_t> = false
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        std::is_array_v<char16_t> = false
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::is_base_of_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        std::is_base_of_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        PTHREAD_MUTEX_RECURSIVE_NP = PTHREAD_MUTEX_RECURSIVE_NP
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [4], void>::ok = true
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd1 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd1 = 1
        std::denorm_indeterminate = std::denorm_indeterminate
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd2 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd2 = 1
        SAL_DETAIL_LOG_LEVEL_INFO = SAL_DETAIL_LOG_LEVEL_INFO
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        std::memory_order_seq_cst = std::memory_order_seq_cst
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        PTHREAD_MUTEX_TIMED_NP = PTHREAD_MUTEX_TIMED_NP
        std::is_standard_layout_v<wchar_t> = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_standard_layout_v<wchar_t> = true
        std::round_toward_infinity = std::round_toward_infinity
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::is_same_v<wchar_t, wchar_t> = true
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::is_array_v<char32_t> = false
        std::is_array_v<char32_t> = false
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP
        SAL_DETAIL_LOG_LEVEL_DEBUG = SAL_DETAIL_LOG_LEVEL_DEBUG
        std::denorm_absent = std::denorm_absent
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_array_v<wchar_t> = false
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        SAL_DETAIL_LOG_ACTION_LOG = SAL_DETAIL_LOG_ACTION_LOG
        std::round_indeterminate = std::round_indeterminate
        std::round_to_nearest = std::round_to_nearest
        PTHREAD_MUTEX_ERRORCHECK_NP = PTHREAD_MUTEX_ERRORCHECK_NP
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_trivial_v<char32_t> = true
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        std::is_trivial_v<char32_t> = true
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<char*, char*>::__value = std::__are_same<char*, char*>::__value
        std::__are_same<com::sun::star::uno::Reference<com::sun::star::uno::XReference>*, com::sun::star::uno::Reference<com::sun::star::uno::XReference>*>::__value = std::__are_same<com::sun::star::uno::Reference<com::sun::star::uno::XReference>*, com::sun::star::uno::Reference<com::sun::star::uno::XReference>*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::ratio<1, 1000000000>::den = 1000000000
        std::ratio<1, 1>::den = 1
        std::ratio<3600, 1>::den = 1
        std::ratio<60, 1>::den = 1
        std::ratio<1, 1000>::den = 1000
        std::ratio<1, 1000000>::den = 1000000
        std::ratio<1000000000, 1>::den = 1
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::ratio<1l, 1000000000l>::den = 1000000000
        std::ratio<1l, 1l>::den = 1
        std::ratio<3600l, 1l>::den = 1
        std::ratio<60l, 1l>::den = 1
        std::ratio<1l, 1000l>::den = 1000
        std::ratio<1l, 1000000l>::den = 1000000
        std::ratio<1000000000l, 1l>::den = 1
        std::memory_order_acquire = std::memory_order_acquire
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
#6  0x00ffffff90ca0502 in cppu::OWeakObject::disposeWeakConnectionPoint() () at /home/infinity/libreoffice/cppuhelper/source/weak.cxx:241
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        cppu::gpWeakMutex = 0xaaaaaac8389dc0
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        PTHREAD_MUTEX_ADAPTIVE_NP = PTHREAD_MUTEX_ADAPTIVE_NP
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<long, 1l>::value = 1
        std::integral_constant<long, 1000000000l>::value = 1000000000
        std::integral_constant<long, 1000l>::value = 1000
        std::integral_constant<long, 1000000l>::value = 1000000
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        SAL_DETAIL_LOG_ACTION_IGNORE = SAL_DETAIL_LOG_ACTION_IGNORE
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        std::round_toward_zero = std::round_toward_zero
        std::memory_order_acq_rel = std::memory_order_acq_rel
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::denorm_present = std::denorm_present
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [4], void>::length = 3
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [26], void>::length = 25
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [40], void>::length = 39
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [43], void>::length = 42
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [23], void>::length = 22
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [30], void>::length = 29
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [44], void>::length = 43
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [48], void>::length = 47
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [11], void>::length = 10
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [6], void>::length = 5
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_standard_layout_v<char> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::ratio<1, 1000000000>::num = 1
        std::ratio<1, 1>::num = 1
        std::ratio<3600, 1>::num = 3600
        std::ratio<60, 1>::num = 60
        std::ratio<1, 1000>::num = 1
        std::ratio<1, 1000000>::num = 1
        std::ratio<1000000000, 1>::num = 1000000000
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        std::ratio<1l, 1000000000l>::num = 1
        std::ratio<1l, 1l>::num = 1
        std::ratio<3600l, 1l>::num = 3600
        std::ratio<60l, 1l>::num = 60
        std::ratio<1l, 1000l>::num = 1
        std::ratio<1l, 1000000l>::num = 1
        std::ratio<1000000000l, 1l>::num = 1000000000
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::is_same_v<char, char> = true
        PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_TIMED_NP
        std::is_same_v<char, char> = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::memory_order_consume = std::memory_order_consume
        std::is_array_v<char> = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        std::is_array_v<char> = false
        SAL_DETAIL_LOG_LEVEL_WARN = SAL_DETAIL_LOG_LEVEL_WARN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<com::sun::star::uno::XAggregation, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAggregation, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        SAL_DETAIL_LOG_ACTION_FATAL = SAL_DETAIL_LOG_ACTION_FATAL
        std::memory_order_relaxed = std::memory_order_relaxed
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_array_v<char16_t> = false
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        std::is_array_v<char16_t> = false
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::is_base_of_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        std::is_base_of_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        PTHREAD_MUTEX_RECURSIVE_NP = PTHREAD_MUTEX_RECURSIVE_NP
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [4], void>::ok = true
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd1 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd1 = 1
        std::denorm_indeterminate = std::denorm_indeterminate
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd2 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd2 = 1
        SAL_DETAIL_LOG_LEVEL_INFO = SAL_DETAIL_LOG_LEVEL_INFO
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        std::memory_order_seq_cst = std::memory_order_seq_cst
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        PTHREAD_MUTEX_TIMED_NP = PTHREAD_MUTEX_TIMED_NP
        std::is_standard_layout_v<wchar_t> = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_standard_layout_v<wchar_t> = true
        std::round_toward_infinity = std::round_toward_infinity
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::is_same_v<wchar_t, wchar_t> = true
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::is_array_v<char32_t> = false
        std::is_array_v<char32_t> = false
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP
        SAL_DETAIL_LOG_LEVEL_DEBUG = SAL_DETAIL_LOG_LEVEL_DEBUG
        std::denorm_absent = std::denorm_absent
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_array_v<wchar_t> = false
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        SAL_DETAIL_LOG_ACTION_LOG = SAL_DETAIL_LOG_ACTION_LOG
        std::round_indeterminate = std::round_indeterminate
        std::round_to_nearest = std::round_to_nearest
        PTHREAD_MUTEX_ERRORCHECK_NP = PTHREAD_MUTEX_ERRORCHECK_NP
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_trivial_v<char32_t> = true
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        std::is_trivial_v<char32_t> = true
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<char*, char*>::__value = std::__are_same<char*, char*>::__value
        std::__are_same<com::sun::star::uno::Reference<com::sun::star::uno::XReference>*, com::sun::star::uno::Reference<com::sun::star::uno::XReference>*>::__value = std::__are_same<com::sun::star::uno::Reference<com::sun::star::uno::XReference>*, com::sun::star::uno::Reference<com::sun::star::uno::XReference>*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::ratio<1, 1000000000>::den = 1000000000
        std::ratio<1, 1>::den = 1
        std::ratio<3600, 1>::den = 1
        std::ratio<60, 1>::den = 1
        std::ratio<1, 1000>::den = 1000
        std::ratio<1, 1000000>::den = 1000000
        std::ratio<1000000000, 1>::den = 1
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::ratio<1l, 1000000000l>::den = 1000000000
        std::ratio<1l, 1l>::den = 1
        std::ratio<3600l, 1l>::den = 1
        std::ratio<60l, 1l>::den = 1
        std::ratio<1l, 1000l>::den = 1000
        std::ratio<1l, 1000000l>::den = 1000000
        std::ratio<1000000000l, 1l>::den = 1
        std::memory_order_acquire = std::memory_order_acquire
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
#7  0x00ffffff90ca0470 in cppu::OWeakObject::release() () at /home/infinity/libreoffice/cppuhelper/source/weak.cxx:228
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        cppu::gpWeakMutex = 0xaaaaaac8389dc0
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        PTHREAD_MUTEX_ADAPTIVE_NP = PTHREAD_MUTEX_ADAPTIVE_NP
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<long, 1l>::value = 1
        std::integral_constant<long, 1000000000l>::value = 1000000000
        std::integral_constant<long, 1000l>::value = 1000
        std::integral_constant<long, 1000000l>::value = 1000000
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        SAL_DETAIL_LOG_ACTION_IGNORE = SAL_DETAIL_LOG_ACTION_IGNORE
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        std::round_toward_zero = std::round_toward_zero
        std::memory_order_acq_rel = std::memory_order_acq_rel
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::denorm_present = std::denorm_present
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [4], void>::length = 3
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [26], void>::length = 25
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [40], void>::length = 39
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [43], void>::length = 42
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [23], void>::length = 22
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [30], void>::length = 29
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [44], void>::length = 43
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [48], void>::length = 47
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [11], void>::length = 10
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [6], void>::length = 5
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_standard_layout_v<char> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::ratio<1, 1000000000>::num = 1
        std::ratio<1, 1>::num = 1
        std::ratio<3600, 1>::num = 3600
        std::ratio<60, 1>::num = 60
        std::ratio<1, 1000>::num = 1
        std::ratio<1, 1000000>::num = 1
        std::ratio<1000000000, 1>::num = 1000000000
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        std::ratio<1l, 1000000000l>::num = 1
        std::ratio<1l, 1l>::num = 1
        std::ratio<3600l, 1l>::num = 3600
        std::ratio<60l, 1l>::num = 60
        std::ratio<1l, 1000l>::num = 1
        std::ratio<1l, 1000000l>::num = 1
        std::ratio<1000000000l, 1l>::num = 1000000000
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::is_same_v<char, char> = true
        PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_TIMED_NP
        std::is_same_v<char, char> = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::memory_order_consume = std::memory_order_consume
        std::is_array_v<char> = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        std::is_array_v<char> = false
        SAL_DETAIL_LOG_LEVEL_WARN = SAL_DETAIL_LOG_LEVEL_WARN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<com::sun::star::uno::XAggregation, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAggregation, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        SAL_DETAIL_LOG_ACTION_FATAL = SAL_DETAIL_LOG_ACTION_FATAL
        std::memory_order_relaxed = std::memory_order_relaxed
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_array_v<char16_t> = false
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        std::is_array_v<char16_t> = false
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::is_base_of_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        std::is_base_of_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        PTHREAD_MUTEX_RECURSIVE_NP = PTHREAD_MUTEX_RECURSIVE_NP
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [4], void>::ok = true
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd1 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd1 = 1
        std::denorm_indeterminate = std::denorm_indeterminate
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd2 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd2 = 1
        SAL_DETAIL_LOG_LEVEL_INFO = SAL_DETAIL_LOG_LEVEL_INFO
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        std::memory_order_seq_cst = std::memory_order_seq_cst
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        PTHREAD_MUTEX_TIMED_NP = PTHREAD_MUTEX_TIMED_NP
        std::is_standard_layout_v<wchar_t> = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_standard_layout_v<wchar_t> = true
        std::round_toward_infinity = std::round_toward_infinity
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::is_same_v<wchar_t, wchar_t> = true
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::is_array_v<char32_t> = false
        std::is_array_v<char32_t> = false
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP
        SAL_DETAIL_LOG_LEVEL_DEBUG = SAL_DETAIL_LOG_LEVEL_DEBUG
        std::denorm_absent = std::denorm_absent
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_array_v<wchar_t> = false
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        SAL_DETAIL_LOG_ACTION_LOG = SAL_DETAIL_LOG_ACTION_LOG
        std::round_indeterminate = std::round_indeterminate
        std::round_to_nearest = std::round_to_nearest
        PTHREAD_MUTEX_ERRORCHECK_NP = PTHREAD_MUTEX_ERRORCHECK_NP
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_trivial_v<char32_t> = true
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        std::is_trivial_v<char32_t> = true
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<char*, char*>::__value = std::__are_same<char*, char*>::__value
        std::__are_same<com::sun::star::uno::Reference<com::sun::star::uno::XReference>*, com::sun::star::uno::Reference<com::sun::star::uno::XReference>*>::__value = std::__are_same<com::sun::star::uno::Reference<com::sun::star::uno::XReference>*, com::sun::star::uno::Reference<com::sun::star::uno::XReference>*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::ratio<1, 1000000000>::den = 1000000000
        std::ratio<1, 1>::den = 1
        std::ratio<3600, 1>::den = 1
        std::ratio<60, 1>::den = 1
        std::ratio<1, 1000>::den = 1000
        std::ratio<1, 1000000>::den = 1000000
        std::ratio<1000000000, 1>::den = 1
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::ratio<1l, 1000000000l>::den = 1000000000
        std::ratio<1l, 1l>::den = 1
        std::ratio<3600l, 1l>::den = 1
        std::ratio<60l, 1l>::den = 1
        std::ratio<1l, 1000l>::den = 1000
        std::ratio<1l, 1000000l>::den = 1000000
        std::ratio<1000000000l, 1l>::den = 1
        std::memory_order_acquire = std::memory_order_acquire
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
#8  0x00ffffff90e03db6 in com::sun::star::uno::Reference<com::sun::star::uno::XWeak>::clear() () at /home/infinity/libreoffice/include/com/sun/star/uno/Reference.hxx:231
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#9  0x00ffffff90e000b0 in (anonymous namespace)::Test::testReferenceDispose() () at /home/infinity/libreoffice/cppuhelper/qa/weak/test_weak.cxx:87
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#10 0x00ffffff90e011b8 in void std::__invoke_impl<void, void ((anonymous namespace)::Test::*&)(), (anonymous namespace)::Test*&>(std::__invoke_memfun_deref, void ((anonymous namespace)::Test::*&)(), (anonymous namespace)::Test*&) () at /usr/include/c++/11/bits/invoke.h:74
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#11 0x00ffffff90e01136 in std::__invoke_result<void ((anonymous namespace)::Test::*&)(), (anonymous namespace)::Test*&>::type std::__invoke<void ((anonymous namespace)::Test::*&)(), (anonymous namespace)::Test*&>(void ((anonymous namespace)::Test::*&)(), (anonymous namespace)::Test*&) () at /usr/include/c++/11/bits/invoke.h:96
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#12 0x00ffffff90e01096 in void std::_Bind<void ((anonymous namespace)::Test::*((anonymous namespace)::Test*))()>::__call<void, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) () at /usr/include/c++/11/functional:420
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#13 0x00ffffff90e00fb2 in void std::_Bind<void ((anonymous namespace)::Test::*((anonymous namespace)::Test*))()>::operator()<, void>() () at /usr/include/c++/11/functional:503
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#14 0x00ffffff90e00ee6 in void std::__invoke_impl<void, std::_Bind<void ((anonymous namespace)::Test::*((anonymous namespace)::Test*))()>&>(std::__invoke_other, std::_Bind<void ((anonymous namespace)::Test::*((anonymous namespace)::Test*))()>&) () at /usr/include/c++/11/bits/invoke.h:61
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#15 0x00ffffff90e00d68 in std::enable_if<is_invocable_r_v<void, std::_Bind<void ((anonymous namespace)::Test::*((anonymous namespace)::Test*))()>&>, void>::type std::__invoke_r<void, std::_Bind<void ((anonymous namespace)::Test::*((anonymous namespace)::Test*))()>&>(std::_Bind<void ((anonymous namespace)::Test::*((anonymous namespace)::Test*))()>&) () at /usr/include/c++/11/bits/invoke.h:111
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#16 0x00ffffff90e00bba in std::_Function_handler<void (), std::_Bind<void ((anonymous namespace)::Test::*((anonymous namespace)::Test*))()> >::_M_invoke(std::_Any_data const&) () at /usr/include/c++/11/bits/std_function.h:290
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#17 0x00ffffff90e05350 in std::function<void ()>::operator()() const () at /usr/include/c++/11/bits/std_function.h:590
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#18 0x00ffffff90e0158c in CppUnit::TestCaller<(anonymous namespace)::Test>::runTest() () at /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/include/cppunit/TestCaller.h:175
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        com::sun::star::uno::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        (anonymous namespace)::autoRegisterRegistry__93 = {m_registry = 0xaaaaaac8389df0, m_factory = {<CppUnit::TestFactory> = {_vptr.TestFactory = 0xffffff90e0c5f0 <vtable for CppUnit::TestSuiteFactory<(anonymous namespace)::Test>+16>}, <No data fields>}}   
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE        
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        com::sun::star::uno::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::is_invocable_r_v = true
        std::is_invocable_r_v = true
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        com::sun::star::uno::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        com::sun::star::uno::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        com::sun::star::uno::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        std::is_base_of_v = true
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        com::sun::star::uno::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD
        std::is_nothrow_invocable_r_v = false
        std::is_nothrow_invocable_r_v = false
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::is_trivial_v<char32_t> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_LONG
        com::sun::star::uno::TypeClass::TypeClass_FLOAT = com::sun::star::uno::TypeClass::TypeClass_FLOAT
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        typelib_TypeClass_DOUBLE = typelib_TypeClass_DOUBLE
        std::is_array_v<char32_t> = false
        typelib_TypeClass_VOID = typelib_TypeClass_VOID
        std::is_array_v<char32_t> = false
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::round_toward_zero = std::round_toward_zero
        std::__clone_functor = std::__clone_functor
        com::sun::star::uno::TypeClass::TypeClass_TYPEDEF = com::sun::star::uno::TypeClass::TypeClass_TYPEDEF
        typelib_TypeClass_INTERFACE_METHOD = typelib_TypeClass_INTERFACE_METHOD
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        com::sun::star::uno::TypeClass::TypeClass_ANY = com::sun::star::uno::TypeClass::TypeClass_ANY
        typelib_TypeClass_TYPEDEF = typelib_TypeClass_TYPEDEF
        com::sun::star::uno::UNO_QUERY = com::sun::star::uno::UNO_QUERY
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XAdapter, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE = com::sun::star::uno::TypeClass::TypeClass_MAKE_FIXED_SIZE     
        com::sun::star::uno::UNO_QUERY_THROW = com::sun::star::uno::UNO_QUERY_THROW
        com::sun::star::uno::TypeClass::TypeClass_EXCEPTION = com::sun::star::uno::TypeClass::TypeClass_EXCEPTION
        std::memory_order_relaxed = std::memory_order_relaxed
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        com::sun::star::uno::TypeClass::TypeClass_SHORT = com::sun::star::uno::TypeClass::TypeClass_SHORT
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        com::sun::star::uno::TypeClass::TypeClass_ARRAY = com::sun::star::uno::TypeClass::TypeClass_ARRAY
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        typelib_TypeClass_ENUM = typelib_TypeClass_ENUM
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        com::sun::star::uno::TypeClass::TypeClass_STRING = com::sun::star::uno::TypeClass::TypeClass_STRING
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_SINGLETON = typelib_TypeClass_SINGLETON
        std::is_standard_layout_v<wchar_t> = true
        typelib_TypeClass_UNSIGNED_SHORT = typelib_TypeClass_UNSIGNED_SHORT
        std::is_void_v<void> = true
        std::is_void_v<void> = true
        typelib_TypeClass_FLOAT = typelib_TypeClass_FLOAT
        std::denorm_present = std::denorm_present
        com::sun::star::uno::UNO_REF_NO_ACQUIRE = com::sun::star::uno::UNO_REF_NO_ACQUIRE
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::ok = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char16_t, char16_t> = true
        typelib_TypeClass_MODULE = typelib_TypeClass_MODULE
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::lang::XTypeProvider, com::sun::star::uno::XInterface> = false
        std::__get_type_info = std::__get_type_info
        typelib_TypeClass_LONG = typelib_TypeClass_LONG
        typelib_TypeClass_STRUCT = typelib_TypeClass_STRUCT
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        com::sun::star::uno::TypeClass::TypeClass_VOID = com::sun::star::uno::TypeClass::TypeClass_VOID
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        typelib_TypeClass_BYTE = typelib_TypeClass_BYTE
        typelib_TypeClass_SHORT = typelib_TypeClass_SHORT
        typelib_TypeClass_ARRAY = typelib_TypeClass_ARRAY
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XReference, com::sun::star::uno::XInterface> = false
        com::sun::star::uno::TypeClass::TypeClass_CONSTANT = com::sun::star::uno::TypeClass::TypeClass_CONSTANT
        typelib_TypeClass_BOOLEAN = typelib_TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_SHORT       
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        com::sun::star::uno::Sequence<signed char>::s_pType = 0x0
        com::sun::star::uno::Sequence<com::sun::star::uno::Type>::s_pType = 0x0
        std::_Function_base::_M_max_align = 8
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        typelib_TypeClass_SERVICE = typelib_TypeClass_SERVICE
        std::memory_order_acq_rel = std::memory_order_acq_rel
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE
        std::__get_functor_ptr = std::__get_functor_ptr
        typelib_TypeClass_CHAR = typelib_TypeClass_CHAR
        typelib_TypeClass_EXCEPTION = typelib_TypeClass_EXCEPTION
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        com::sun::star::uno::TypeClass::TypeClass_CONSTANTS = com::sun::star::uno::TypeClass::TypeClass_CONSTANTS
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_ENUM = com::sun::star::uno::TypeClass::TypeClass_ENUM
        std::is_array_v<wchar_t> = false
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_METHOD   
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::memory_order_release = std::memory_order_release
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        com::sun::star::uno::TypeClass::TypeClass_DOUBLE = com::sun::star::uno::TypeClass::TypeClass_DOUBLE
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        typelib_TypeClass_INTERFACE_ATTRIBUTE = typelib_TypeClass_INTERFACE_ATTRIBUTE
        std::_Function_base::_M_max_size = 16
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<int, 0>::value = 0
        com::sun::star::uno::TypeClass::TypeClass_PROPERTY = com::sun::star::uno::TypeClass::TypeClass_PROPERTY
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUString>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        com::sun::star::uno::TypeClass::TypeClass_HYPER = com::sun::star::uno::TypeClass::TypeClass_HYPER
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        com::sun::star::uno::TypeClass::TypeClass_SEQUENCE = com::sun::star::uno::TypeClass::TypeClass_SEQUENCE
        std::__numeric_limits_base::max_digits10 = 0
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::max_digits10 = 36
        std::numeric_limits<long double>::is_modulo = false
        typelib_TypeClass_TYPE = typelib_TypeClass_TYPE
        com::sun::star::uno::UNO_TYPE_NO_ACQUIRE = com::sun::star::uno::UNO_TYPE_NO_ACQUIRE
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::memory_order_seq_cst = std::memory_order_seq_cst
        typelib_TypeClass_UNKNOWN = typelib_TypeClass_UNKNOWN
        typelib_TypeClass_UNSIGNED_HYPER = typelib_TypeClass_UNSIGNED_HYPER
        com::sun::star::uno::TypeClass::TypeClass_BOOLEAN = com::sun::star::uno::TypeClass::TypeClass_BOOLEAN
        com::sun::star::uno::TypeClass::TypeClass_LONG = com::sun::star::uno::TypeClass::TypeClass_LONG
        com::sun::star::uno::TypeClass::TypeClass_UNION = com::sun::star::uno::TypeClass::TypeClass_UNION
        std::is_same_v<char, char> = true
        std::is_same_v<char, char> = true
        com::sun::star::uno::TypeClass::TypeClass_SERVICE = com::sun::star::uno::TypeClass::TypeClass_SERVICE
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        typelib_TypeClass_CONSTANT = typelib_TypeClass_CONSTANT
        std::__destroy_functor = std::__destroy_functor
        std::memory_order_consume = std::memory_order_consume
        typelib_TypeClass_STRING = typelib_TypeClass_STRING
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        typelib_TypeClass_MAKE_FIXED_SIZE = typelib_TypeClass_MAKE_FIXED_SIZE
        com::sun::star::uno::UNO_SET_THROW = com::sun::star::uno::UNO_SET_THROW
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        com::sun::star::uno::TypeClass::TypeClass_BYTE = com::sun::star::uno::TypeClass::TypeClass_BYTE
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::is_same_v<com::sun::star::uno::XWeak, com::sun::star::uno::XInterface> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        std::is_array_v<char16_t> = false
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE = com::sun::star::uno::TypeClass::TypeClass_INTERFACE_ATTRIBUTE
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        typelib_TypeClass_INTERFACE = typelib_TypeClass_INTERFACE
        com::sun::star::uno::TypeClass::TypeClass_CHAR = com::sun::star::uno::TypeClass::TypeClass_CHAR
        typelib_TypeClass_HYPER = typelib_TypeClass_HYPER
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value = std::__are_same<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*>::__value
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        typelib_TypeClass_PROPERTY = typelib_TypeClass_PROPERTY
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        com::sun::star::uno::TypeClass::TypeClass_MODULE = com::sun::star::uno::TypeClass::TypeClass_MODULE
        typelib_TypeClass_CONSTANTS = typelib_TypeClass_CONSTANTS
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER = com::sun::star::uno::TypeClass::TypeClass_UNSIGNED_HYPER       
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        typelib_TypeClass_SEQUENCE = typelib_TypeClass_SEQUENCE
        std::denorm_indeterminate = std::denorm_indeterminate
        com::sun::star::uno::TypeClass::TypeClass_UNKNOWN = com::sun::star::uno::TypeClass::TypeClass_UNKNOWN
        std::denorm_absent = std::denorm_absent
        com::sun::star::uno::TypeClass::TypeClass_STRUCT = com::sun::star::uno::TypeClass::TypeClass_STRUCT
        typelib_TypeClass_UNION = typelib_TypeClass_UNION
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUString>::allowOUStringConcat = true
        rtl::ToStringHelper<char const [4]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<char const [4], rtl::OUString> >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [2]>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcat<char const [4], rtl::OUString>, char const [2]> >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OUStringNumber<unsigned long long> >::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        std::memory_order_acquire = std::memory_order_acquire
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        com::sun::star::uno::TypeClass::TypeClass_TYPE = com::sun::star::uno::TypeClass::TypeClass_TYPE
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        com::sun::star::uno::TypeClass::TypeClass_SINGLETON = com::sun::star::uno::TypeClass::TypeClass_SINGLETON
        typelib_TypeClass_UNSIGNED_LONG = typelib_TypeClass_UNSIGNED_LONG
        typelib_TypeClass_ANY = typelib_TypeClass_ANY
        std::is_same_v<char32_t, char32_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::is_same_v<com::sun::star::uno::XInterface, com::sun::star::uno::XInterface> = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [2], void>::length = 1
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [34], void>::length = 33
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [36], void>::length = 35
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [28], void>::length = 27
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [37], void>::length = 36
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [5], void>::length = 4
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [32], void>::length = 31
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [42], void>::length = 41
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [53], void>::length = 52
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [7], void>::length = 6
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::round_to_nearest = std::round_to_nearest
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
#19 0x00ffffff913481da in CppUnit::TestCaseMethodFunctor::operator()() const () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#20 0x00ffffff91337e48 in CppUnit::DefaultProtector::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#21 0x00ffffff91342494 in CppUnit::ProtectorChain::ProtectFunctor::operator()() const () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#22 0x00ffffff91342340 in CppUnit::ProtectorChain::protect(CppUnit::Functor const&, CppUnit::ProtectorContext const&) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#23 0x00ffffff91354a76 in CppUnit::TestResult::protect(CppUnit::Functor const&, CppUnit::Test*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#24 0x00ffffff91347ccc in CppUnit::TestCase::run(CppUnit::TestResult*) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#25 0x00ffffff9134881c in CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#26 0x00ffffff913486a2 in CppUnit::TestComposite::run(CppUnit::TestResult*) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#27 0x00ffffff9134881c in CppUnit::TestComposite::doRunChildTests(CppUnit::TestResult*) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#28 0x00ffffff913486a2 in CppUnit::TestComposite::run(CppUnit::TestResult*) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#29 0x00ffffff91359290 in CppUnit::TestRunner::WrappingSuite::run(CppUnit::TestResult*) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#30 0x00ffffff91354830 in CppUnit::TestResult::runTest(CppUnit::Test*) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#31 0x00ffffff913594a6 in CppUnit::TestRunner::run(CppUnit::TestResult&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /home/infinity/libreoffice/workdir/UnpackedTarball/cppunit/src/cppunit/.libs/libcppunit-1.15.so.1
No symbol table info available.
#32 0x00aaaaaab5da3d54 in (anonymous namespace)::ProtectedFixtureFunctor::run() const () at /home/infinity/libreoffice/sal/cppunittester/cppunittester.cxx:333
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        rtl::detail::surrogatesLowFirst = 56320
        rtl::detail::surrogatesLowFirst = 56320
        rtl::detail::surrogatesHighFirst = 55296
        rtl::detail::surrogatesHighFirst = 55296
        rtl::detail::surrogatesLowLast = 57343
        rtl::detail::surrogatesLowLast = 57343
        sal::detail::InitializeSoffice = -1
        sal::detail::InitializeSoffice = -1
        rtl::detail::surrogatesHighLast = 56319
        rtl::detail::surrogatesHighLast = 56319
        std::memory_order_seq_cst = std::memory_order_seq_cst
        std::ctype_base::lower = 512
        std::locale::collate = 4
        __cxxabiv1::__class_type_info::__not_contained = __cxxabiv1::__class_type_info::__not_contained
        std::ctype_base::print = 16384
        std::ratio<1, 1000000000>::den = 1000000000
        std::ratio<1, 1>::den = 1
        std::ratio<3600, 1>::den = 1
        std::ratio<60, 1>::den = 1
        std::ratio<1, 1000>::den = 1000
        std::ratio<1, 1000000>::den = 1000000
        std::ratio<1000000000, 1>::den = 1
        std::ratio<1l, 1000000000l>::den = 1000000000
        std::ratio<1l, 1l>::den = 1
        std::ratio<3600l, 1l>::den = 1
        std::ratio<60l, 1l>::den = 1
        std::ratio<1l, 1000l>::den = 1000
        std::ratio<1l, 1000000l>::den = 1000000
        std::ratio<1000000000l, 1l>::den = 1
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        boost::detail::integer_traits_base<signed char, (signed char)-128, (signed char)127>::const_max = 127 '\177'
        boost::detail::integer_traits_base<unsigned char, (unsigned char)0, (unsigned char)255>::const_max = 255 '\377'
        boost::detail::integer_traits_base<short, (short)-32768, (short)32767>::const_max = 32767
        boost::detail::integer_traits_base<unsigned short, (unsigned short)0, (unsigned short)65535>::const_max = 65535
        boost::detail::integer_traits_base<int, -2147483648, 2147483647>::const_max = 2147483647
        boost::detail::integer_traits_base<unsigned int, 0u, 4294967295u>::const_max = 4294967295
        boost::detail::integer_traits_base<long, -9223372036854775808l, 9223372036854775807l>::const_max = 9223372036854775807    
        boost::detail::integer_traits_base<unsigned long, 0ul, 18446744073709551615ul>::const_max = 18446744073709551615
        boost::detail::integer_traits_base<long long, -9223372036854775808ll, 9223372036854775807ll>::const_max = 9223372036854775807
        boost::detail::integer_traits_base<unsigned long long, 0ull, 18446744073709551615ull>::const_max = 18446744073709551615   
        std::ratio<1, 1000000000>::num = 1
        std::ratio<1, 1>::num = 1
        std::ratio<3600, 1>::num = 3600
        std::ratio<60, 1>::num = 60
        std::ratio<1, 1000>::num = 1
        std::ratio<1, 1000000>::num = 1
        std::ratio<1000000000, 1>::num = 1000000000
        std::ratio<1l, 1000000000l>::num = 1
        std::ratio<1l, 1l>::num = 1
        std::ratio<3600l, 1l>::num = 3600
        std::ratio<60l, 1l>::num = 60
        std::ratio<1l, 1000l>::num = 1
        std::ratio<1l, 1000000l>::num = 1
        std::ratio<1000000000l, 1l>::num = 1000000000
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        __cxxabiv1::__class_type_info::__contained_ambig = __cxxabiv1::__class_type_info::__contained_ambig
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::ctype_base::punct = 4
        std::_S_ios_openmode_max = std::_S_ios_openmode_max
        osl_Process_E_NotFound = osl_Process_E_NotFound
        std::memory_order_acq_rel = std::memory_order_acq_rel
        boost::detail::function::clone_functor_tag = boost::detail::function::clone_functor_tag
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        __cxxabiv1::__class_type_info::__contained_public_mask = __cxxabiv1::__class_type_info::__contained_ambig
        std::denorm_absent = std::denorm_absent
        std::memory_order_relaxed = std::memory_order_relaxed
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        SAL_DETAIL_LOG_ACTION_IGNORE = SAL_DETAIL_LOG_ACTION_IGNORE
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::_S_bin = std::_S_bin
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::is_same_v<char, char> = true
        osl_Process_E_Unknown = osl_Process_E_Unknown
        std::is_same_v<char, char> = true
        std::_S_out = std::_S_out
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::memory_order_release = std::memory_order_release
        std::_S_trunc = std::_S_trunc
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        __cxxabiv1::__class_type_info::__contained_private = __cxxabiv1::__class_type_info::__contained_mask
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        osl_Process_E_NoPermission = osl_Process_E_NoPermission
        std::memory_order_acquire = std::memory_order_acquire
        std::denorm_indeterminate = std::denorm_indeterminate
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [24], void>::length = 23
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [6], void>::length = 5
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [12], void>::length = 11
        std::round_to_nearest = std::round_to_nearest
        std::is_array_v<char32_t> = false
        std::is_array_v<char32_t> = false
        SAL_DETAIL_LOG_LEVEL_INFO = SAL_DETAIL_LOG_LEVEL_INFO
        std::is_array_v<char16_t> = false
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        boost::detail::function::move_functor_tag = boost::detail::function::move_functor_tag
        std::locale::monetary = 16
        std::_S_ios_openmode_end = std::_S_ios_openmode_end
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        std::ctype_base::xdigit = 4096
        std::_S_in = std::_S_in
        std::is_integral_v<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > = false
        std::is_integral_v<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > = false
        std::ctype_base::alnum = 3072
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        osl_Process_E_InvalidError = osl_Process_E_InvalidError
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        RUSAGE_THREAD = RUSAGE_THREAD
        std::ctype_base::graph = 3076
        std::_S_ate = std::_S_ate
        std::locale::messages = 32
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::locale::ctype = 1
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        boost::algorithm::token_compress_on = boost::algorithm::token_compress_on
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        boost::detail::integer_traits_base<signed char, (signed char)-128, (signed char)127>::const_min = -128 '\200'
        boost::detail::integer_traits_base<short, (short)-32768, (short)32767>::const_min = -32768
        boost::detail::integer_traits_base<int, -2147483648, 2147483647>::const_min = -2147483648
        boost::detail::integer_traits_base<long, -9223372036854775808l, 9223372036854775807l>::const_min = -9223372036854775808   
        boost::detail::integer_traits_base<long long, -9223372036854775808ll, 9223372036854775807ll>::const_min = -9223372036854775808
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        RUSAGE_SELF = RUSAGE_SELF
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcatMarker, std::basic_string_view<char16_t, std::char_traits<char16_t> > > >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOStringConcat = true
        std::_S_threshold = std::_S_threshold
        SAL_DETAIL_LOG_LEVEL_DEBUG = SAL_DETAIL_LOG_LEVEL_DEBUG
        std::ctype_base::upper = 256
        boost::detail::function::destroy_functor_tag = boost::detail::function::destroy_functor_tag
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char32_t, char32_t> = true
        __cxxabiv1::__class_type_info::__contained_public = __cxxabiv1::__class_type_info::__contained_public
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<long, 1l>::value = 1
        std::integral_constant<long, 1000000000l>::value = 1000000000
        std::integral_constant<long, 1000l>::value = 1000
        std::integral_constant<long, 1000000l>::value = 1000000
        mpl_::integral_c_tag::value = 0
        mpl_::int_<3>::value = 3
        mpl_::int_<4>::value = 4
        mpl_::int_<2>::value = 2
        mpl_::int_<-1>::value = -1
        mpl_::int_<1>::value = 1
        mpl_::int_<5>::value = 5
        mpl_::int_<6>::value = 6
        mpl_::int_<7>::value = 7
        mpl_::int_<8>::value = 8
        mpl_::int_<9>::value = 9
        mpl_::int_<10>::value = 10
        mpl_::int_<11>::value = 11
        mpl_::int_<12>::value = 12
        mpl_::arg<-1>::value = -1
        mpl_::arg<1>::value = 1
        mpl_::arg<2>::value = 2
        mpl_::arg<3>::value = 3
        mpl_::arg<4>::value = 4
        mpl_::arg<5>::value = 5
        mpl_::bool_<false>::value = false
        mpl_::bool_<true>::value = true
        boost::integral_constant<bool, false>::value = false
        boost::integral_constant<bool, true>::value = true
        mpl_::int_<3>::value = 3
        mpl_::int_<-1>::value = -1
        mpl_::int_<1>::value = 1
        mpl_::int_<2>::value = 2
        mpl_::int_<4>::value = 4
        mpl_::int_<5>::value = 5
        mpl_::int_<6>::value = 6
        mpl_::int_<7>::value = 7
        mpl_::int_<8>::value = 8
        mpl_::int_<9>::value = 9
        mpl_::int_<10>::value = 10
        mpl_::int_<11>::value = 11
        mpl_::int_<12>::value = 12
        boost::integral_constant<unsigned long, 8ul>::value = 8
        std::ctype_base::space = 8192
        std::ctype_base::digit = 2048
        SAL_DETAIL_LOG_LEVEL_WARN = SAL_DETAIL_LOG_LEVEL_WARN
        std::locale::all = 63
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::round_toward_zero = std::round_toward_zero
        __cxxabiv1::__class_type_info::__contained_virtual_mask = __cxxabiv1::__class_type_info::__not_contained
        osl_Process_E_None = osl_Process_E_None
        std::_S_ios_openmode_min = std::_S_ios_openmode_min
        std::is_array_v<wchar_t> = false
        std::is_array_v<wchar_t> = false
        boost::detail::function::check_functor_type_tag = boost::detail::function::check_functor_type_tag
        osl_Process_E_TimedOut = osl_Process_E_TimedOut
        std::ctype_base::alpha = 1024
        __cxxabiv1::__class_type_info::__unknown = __cxxabiv1::__class_type_info::__unknown
        boost::algorithm::token_compress_off = boost::algorithm::token_compress_off
        std::memory_order_consume = std::memory_order_consume
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd1 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd1 = 1
        std::_S_app = std::_S_app
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd2 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd2 = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        osl_Process_E_FORCE_EQUAL_SIZE = osl_Process_E_FORCE_EQUAL_SIZE
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        std::locale::time = 8
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        __cxxabiv1::__class_type_info::__contained_mask = __cxxabiv1::__class_type_info::__contained_mask
        std::denorm_present = std::denorm_present
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        boost::detail::function::get_functor_type_tag = boost::detail::function::get_functor_type_tag
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcatMarker, std::basic_string_view<char16_t, std::char_traits<char16_t> > > >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [14]>::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOUStringConcat = false
        SAL_DETAIL_LOG_ACTION_LOG = SAL_DETAIL_LOG_ACTION_LOG
        std::locale::none = 0
        std::ctype_base::cntrl = 2
        SAL_DETAIL_LOG_ACTION_FATAL = SAL_DETAIL_LOG_ACTION_FATAL
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::is_integral_v<unsigned char> = true
        std::is_integral_v<unsigned char> = true
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::ctype_base::blank = 1
        std::locale::numeric = 2
        std::is_standard_layout_v<wchar_t> = true
        std::is_standard_layout_v<wchar_t> = true
        RUSAGE_CHILDREN = RUSAGE_CHILDREN
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        std::basic_string_view<char16_t, std::char_traits<char16_t> >::npos = 18446744073709551615
        std::is_trivial_v<char32_t> = true
        std::is_trivial_v<char32_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
#33 0x00aaaaaab5da47c2 in main2() () at /home/infinity/libreoffice/sal/cppunittester/cppunittester.cxx:482
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        rtl::detail::surrogatesLowFirst = 56320
        rtl::detail::surrogatesLowFirst = 56320
        rtl::detail::surrogatesHighFirst = 55296
        rtl::detail::surrogatesHighFirst = 55296
        rtl::detail::surrogatesLowLast = 57343
        rtl::detail::surrogatesLowLast = 57343
        sal::detail::InitializeSoffice = -1
        sal::detail::InitializeSoffice = -1
        rtl::detail::surrogatesHighLast = 56319
        rtl::detail::surrogatesHighLast = 56319
        std::memory_order_seq_cst = std::memory_order_seq_cst
        std::ctype_base::lower = 512
        std::locale::collate = 4
        __cxxabiv1::__class_type_info::__not_contained = __cxxabiv1::__class_type_info::__not_contained
        std::ctype_base::print = 16384
        std::ratio<1, 1000000000>::den = 1000000000
        std::ratio<1, 1>::den = 1
        std::ratio<3600, 1>::den = 1
        std::ratio<60, 1>::den = 1
        std::ratio<1, 1000>::den = 1000
        std::ratio<1, 1000000>::den = 1000000
        std::ratio<1000000000, 1>::den = 1
        std::ratio<1l, 1000000000l>::den = 1000000000
        std::ratio<1l, 1l>::den = 1
        std::ratio<3600l, 1l>::den = 1
        std::ratio<60l, 1l>::den = 1
        std::ratio<1l, 1000l>::den = 1000
        std::ratio<1l, 1000000l>::den = 1000000
        std::ratio<1000000000l, 1l>::den = 1
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        boost::detail::integer_traits_base<signed char, (signed char)-128, (signed char)127>::const_max = 127 '\177'
        boost::detail::integer_traits_base<unsigned char, (unsigned char)0, (unsigned char)255>::const_max = 255 '\377'
        boost::detail::integer_traits_base<short, (short)-32768, (short)32767>::const_max = 32767
        boost::detail::integer_traits_base<unsigned short, (unsigned short)0, (unsigned short)65535>::const_max = 65535
        boost::detail::integer_traits_base<int, -2147483648, 2147483647>::const_max = 2147483647
        boost::detail::integer_traits_base<unsigned int, 0u, 4294967295u>::const_max = 4294967295
        boost::detail::integer_traits_base<long, -9223372036854775808l, 9223372036854775807l>::const_max = 9223372036854775807    
        boost::detail::integer_traits_base<unsigned long, 0ul, 18446744073709551615ul>::const_max = 18446744073709551615
        boost::detail::integer_traits_base<long long, -9223372036854775808ll, 9223372036854775807ll>::const_max = 9223372036854775807
        boost::detail::integer_traits_base<unsigned long long, 0ull, 18446744073709551615ull>::const_max = 18446744073709551615   
        std::ratio<1, 1000000000>::num = 1
        std::ratio<1, 1>::num = 1
        std::ratio<3600, 1>::num = 3600
        std::ratio<60, 1>::num = 60
        std::ratio<1, 1000>::num = 1
        std::ratio<1, 1000000>::num = 1
        std::ratio<1000000000, 1>::num = 1000000000
        std::ratio<1l, 1000000000l>::num = 1
        std::ratio<1l, 1l>::num = 1
        std::ratio<3600l, 1l>::num = 3600
        std::ratio<60l, 1l>::num = 60
        std::ratio<1l, 1000l>::num = 1
        std::ratio<1l, 1000000l>::num = 1
        std::ratio<1000000000l, 1l>::num = 1000000000
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        __cxxabiv1::__class_type_info::__contained_ambig = __cxxabiv1::__class_type_info::__contained_ambig
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::ctype_base::punct = 4
        std::_S_ios_openmode_max = std::_S_ios_openmode_max
        osl_Process_E_NotFound = osl_Process_E_NotFound
        std::memory_order_acq_rel = std::memory_order_acq_rel
        boost::detail::function::clone_functor_tag = boost::detail::function::clone_functor_tag
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        __cxxabiv1::__class_type_info::__contained_public_mask = __cxxabiv1::__class_type_info::__contained_ambig
        std::denorm_absent = std::denorm_absent
        std::memory_order_relaxed = std::memory_order_relaxed
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        SAL_DETAIL_LOG_ACTION_IGNORE = SAL_DETAIL_LOG_ACTION_IGNORE
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::_S_bin = std::_S_bin
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::is_same_v<char, char> = true
        osl_Process_E_Unknown = osl_Process_E_Unknown
        std::is_same_v<char, char> = true
        std::_S_out = std::_S_out
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::memory_order_release = std::memory_order_release
        std::_S_trunc = std::_S_trunc
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        __cxxabiv1::__class_type_info::__contained_private = __cxxabiv1::__class_type_info::__contained_mask
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        osl_Process_E_NoPermission = osl_Process_E_NoPermission
        std::memory_order_acquire = std::memory_order_acquire
        std::denorm_indeterminate = std::denorm_indeterminate
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [24], void>::length = 23
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [6], void>::length = 5
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [12], void>::length = 11
        std::round_to_nearest = std::round_to_nearest
        std::is_array_v<char32_t> = false
        std::is_array_v<char32_t> = false
        SAL_DETAIL_LOG_LEVEL_INFO = SAL_DETAIL_LOG_LEVEL_INFO
        std::is_array_v<char16_t> = false
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        boost::detail::function::move_functor_tag = boost::detail::function::move_functor_tag
        std::locale::monetary = 16
        std::_S_ios_openmode_end = std::_S_ios_openmode_end
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        std::ctype_base::xdigit = 4096
        std::_S_in = std::_S_in
        std::is_integral_v<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > = false
        std::is_integral_v<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > = false
        std::ctype_base::alnum = 3072
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        osl_Process_E_InvalidError = osl_Process_E_InvalidError
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        RUSAGE_THREAD = RUSAGE_THREAD
        std::ctype_base::graph = 3076
        std::_S_ate = std::_S_ate
        std::locale::messages = 32
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::locale::ctype = 1
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        boost::algorithm::token_compress_on = boost::algorithm::token_compress_on
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        boost::detail::integer_traits_base<signed char, (signed char)-128, (signed char)127>::const_min = -128 '\200'
        boost::detail::integer_traits_base<short, (short)-32768, (short)32767>::const_min = -32768
        boost::detail::integer_traits_base<int, -2147483648, 2147483647>::const_min = -2147483648
        boost::detail::integer_traits_base<long, -9223372036854775808l, 9223372036854775807l>::const_min = -9223372036854775808   
        boost::detail::integer_traits_base<long long, -9223372036854775808ll, 9223372036854775807ll>::const_min = -9223372036854775808
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        RUSAGE_SELF = RUSAGE_SELF
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcatMarker, std::basic_string_view<char16_t, std::char_traits<char16_t> > > >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOStringConcat = true
        std::_S_threshold = std::_S_threshold
        SAL_DETAIL_LOG_LEVEL_DEBUG = SAL_DETAIL_LOG_LEVEL_DEBUG
        std::ctype_base::upper = 256
        boost::detail::function::destroy_functor_tag = boost::detail::function::destroy_functor_tag
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char32_t, char32_t> = true
        __cxxabiv1::__class_type_info::__contained_public = __cxxabiv1::__class_type_info::__contained_public
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<long, 1l>::value = 1
        std::integral_constant<long, 1000000000l>::value = 1000000000
        std::integral_constant<long, 1000l>::value = 1000
        std::integral_constant<long, 1000000l>::value = 1000000
        mpl_::integral_c_tag::value = 0
        mpl_::int_<3>::value = 3
        mpl_::int_<4>::value = 4
        mpl_::int_<2>::value = 2
        mpl_::int_<-1>::value = -1
        mpl_::int_<1>::value = 1
        mpl_::int_<5>::value = 5
        mpl_::int_<6>::value = 6
        mpl_::int_<7>::value = 7
        mpl_::int_<8>::value = 8
        mpl_::int_<9>::value = 9
        mpl_::int_<10>::value = 10
        mpl_::int_<11>::value = 11
        mpl_::int_<12>::value = 12
        mpl_::arg<-1>::value = -1
        mpl_::arg<1>::value = 1
        mpl_::arg<2>::value = 2
        mpl_::arg<3>::value = 3
        mpl_::arg<4>::value = 4
        mpl_::arg<5>::value = 5
        mpl_::bool_<false>::value = false
        mpl_::bool_<true>::value = true
        boost::integral_constant<bool, false>::value = false
        boost::integral_constant<bool, true>::value = true
        mpl_::int_<3>::value = 3
        mpl_::int_<-1>::value = -1
        mpl_::int_<1>::value = 1
        mpl_::int_<2>::value = 2
        mpl_::int_<4>::value = 4
        mpl_::int_<5>::value = 5
        mpl_::int_<6>::value = 6
        mpl_::int_<7>::value = 7
        mpl_::int_<8>::value = 8
        mpl_::int_<9>::value = 9
        mpl_::int_<10>::value = 10
        mpl_::int_<11>::value = 11
        mpl_::int_<12>::value = 12
        boost::integral_constant<unsigned long, 8ul>::value = 8
        std::ctype_base::space = 8192
        std::ctype_base::digit = 2048
        SAL_DETAIL_LOG_LEVEL_WARN = SAL_DETAIL_LOG_LEVEL_WARN
        std::locale::all = 63
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::round_toward_zero = std::round_toward_zero
        __cxxabiv1::__class_type_info::__contained_virtual_mask = __cxxabiv1::__class_type_info::__not_contained
        osl_Process_E_None = osl_Process_E_None
        std::_S_ios_openmode_min = std::_S_ios_openmode_min
        std::is_array_v<wchar_t> = false
        std::is_array_v<wchar_t> = false
        boost::detail::function::check_functor_type_tag = boost::detail::function::check_functor_type_tag
        osl_Process_E_TimedOut = osl_Process_E_TimedOut
        std::ctype_base::alpha = 1024
        __cxxabiv1::__class_type_info::__unknown = __cxxabiv1::__class_type_info::__unknown
        boost::algorithm::token_compress_off = boost::algorithm::token_compress_off
        std::memory_order_consume = std::memory_order_consume
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd1 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd1 = 1
        std::_S_app = std::_S_app
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd2 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd2 = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        osl_Process_E_FORCE_EQUAL_SIZE = osl_Process_E_FORCE_EQUAL_SIZE
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        std::locale::time = 8
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        __cxxabiv1::__class_type_info::__contained_mask = __cxxabiv1::__class_type_info::__contained_mask
        std::denorm_present = std::denorm_present
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        boost::detail::function::get_functor_type_tag = boost::detail::function::get_functor_type_tag
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcatMarker, std::basic_string_view<char16_t, std::char_traits<char16_t> > > >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [14]>::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOUStringConcat = false
        SAL_DETAIL_LOG_ACTION_LOG = SAL_DETAIL_LOG_ACTION_LOG
        std::locale::none = 0
        std::ctype_base::cntrl = 2
        SAL_DETAIL_LOG_ACTION_FATAL = SAL_DETAIL_LOG_ACTION_FATAL
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::is_integral_v<unsigned char> = true
        std::is_integral_v<unsigned char> = true
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::ctype_base::blank = 1
        std::locale::numeric = 2
        std::is_standard_layout_v<wchar_t> = true
        std::is_standard_layout_v<wchar_t> = true
        RUSAGE_CHILDREN = RUSAGE_CHILDREN
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        std::basic_string_view<char16_t, std::char_traits<char16_t> >::npos = 18446744073709551615
        std::is_trivial_v<char32_t> = true
        std::is_trivial_v<char32_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
#34 0x00aaaaaab5da4970 in sal_main() () at /home/infinity/libreoffice/sal/cppunittester/cppunittester.cxx:621
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        rtl::detail::surrogatesLowFirst = 56320
        rtl::detail::surrogatesLowFirst = 56320
        rtl::detail::surrogatesHighFirst = 55296
        rtl::detail::surrogatesHighFirst = 55296
        rtl::detail::surrogatesLowLast = 57343
        rtl::detail::surrogatesLowLast = 57343
        sal::detail::InitializeSoffice = -1
        sal::detail::InitializeSoffice = -1
        rtl::detail::surrogatesHighLast = 56319
        rtl::detail::surrogatesHighLast = 56319
        std::memory_order_seq_cst = std::memory_order_seq_cst
        std::ctype_base::lower = 512
        std::locale::collate = 4
        __cxxabiv1::__class_type_info::__not_contained = __cxxabiv1::__class_type_info::__not_contained
        std::ctype_base::print = 16384
        std::ratio<1, 1000000000>::den = 1000000000
        std::ratio<1, 1>::den = 1
        std::ratio<3600, 1>::den = 1
        std::ratio<60, 1>::den = 1
        std::ratio<1, 1000>::den = 1000
        std::ratio<1, 1000000>::den = 1000000
        std::ratio<1000000000, 1>::den = 1
        std::ratio<1l, 1000000000l>::den = 1000000000
        std::ratio<1l, 1l>::den = 1
        std::ratio<3600l, 1l>::den = 1
        std::ratio<60l, 1l>::den = 1
        std::ratio<1l, 1000l>::den = 1000
        std::ratio<1l, 1000000l>::den = 1000000
        std::ratio<1000000000l, 1l>::den = 1
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        boost::detail::integer_traits_base<signed char, (signed char)-128, (signed char)127>::const_max = 127 '\177'
        boost::detail::integer_traits_base<unsigned char, (unsigned char)0, (unsigned char)255>::const_max = 255 '\377'
        boost::detail::integer_traits_base<short, (short)-32768, (short)32767>::const_max = 32767
        boost::detail::integer_traits_base<unsigned short, (unsigned short)0, (unsigned short)65535>::const_max = 65535
        boost::detail::integer_traits_base<int, -2147483648, 2147483647>::const_max = 2147483647
        boost::detail::integer_traits_base<unsigned int, 0u, 4294967295u>::const_max = 4294967295
        boost::detail::integer_traits_base<long, -9223372036854775808l, 9223372036854775807l>::const_max = 9223372036854775807    
        boost::detail::integer_traits_base<unsigned long, 0ul, 18446744073709551615ul>::const_max = 18446744073709551615
        boost::detail::integer_traits_base<long long, -9223372036854775808ll, 9223372036854775807ll>::const_max = 9223372036854775807
        boost::detail::integer_traits_base<unsigned long long, 0ull, 18446744073709551615ull>::const_max = 18446744073709551615   
        std::ratio<1, 1000000000>::num = 1
        std::ratio<1, 1>::num = 1
        std::ratio<3600, 1>::num = 3600
        std::ratio<60, 1>::num = 60
        std::ratio<1, 1000>::num = 1
        std::ratio<1, 1000000>::num = 1
        std::ratio<1000000000, 1>::num = 1000000000
        std::ratio<1l, 1000000000l>::num = 1
        std::ratio<1l, 1l>::num = 1
        std::ratio<3600l, 1l>::num = 3600
        std::ratio<60l, 1l>::num = 60
        std::ratio<1l, 1000l>::num = 1
        std::ratio<1l, 1000000l>::num = 1
        std::ratio<1000000000l, 1l>::num = 1000000000
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        __cxxabiv1::__class_type_info::__contained_ambig = __cxxabiv1::__class_type_info::__contained_ambig
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::ctype_base::punct = 4
        std::_S_ios_openmode_max = std::_S_ios_openmode_max
        osl_Process_E_NotFound = osl_Process_E_NotFound
        std::memory_order_acq_rel = std::memory_order_acq_rel
        boost::detail::function::clone_functor_tag = boost::detail::function::clone_functor_tag
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        __cxxabiv1::__class_type_info::__contained_public_mask = __cxxabiv1::__class_type_info::__contained_ambig
        std::denorm_absent = std::denorm_absent
        std::memory_order_relaxed = std::memory_order_relaxed
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        SAL_DETAIL_LOG_ACTION_IGNORE = SAL_DETAIL_LOG_ACTION_IGNORE
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::_S_bin = std::_S_bin
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::is_same_v<char, char> = true
        osl_Process_E_Unknown = osl_Process_E_Unknown
        std::is_same_v<char, char> = true
        std::_S_out = std::_S_out
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::memory_order_release = std::memory_order_release
        std::_S_trunc = std::_S_trunc
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        __cxxabiv1::__class_type_info::__contained_private = __cxxabiv1::__class_type_info::__contained_mask
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        osl_Process_E_NoPermission = osl_Process_E_NoPermission
        std::memory_order_acquire = std::memory_order_acquire
        std::denorm_indeterminate = std::denorm_indeterminate
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [24], void>::length = 23
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [6], void>::length = 5
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [12], void>::length = 11
        std::round_to_nearest = std::round_to_nearest
        std::is_array_v<char32_t> = false
        std::is_array_v<char32_t> = false
        SAL_DETAIL_LOG_LEVEL_INFO = SAL_DETAIL_LOG_LEVEL_INFO
        std::is_array_v<char16_t> = false
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        boost::detail::function::move_functor_tag = boost::detail::function::move_functor_tag
        std::locale::monetary = 16
        std::_S_ios_openmode_end = std::_S_ios_openmode_end
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        std::ctype_base::xdigit = 4096
        std::_S_in = std::_S_in
        std::is_integral_v<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > = false
        std::is_integral_v<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > = false
        std::ctype_base::alnum = 3072
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        osl_Process_E_InvalidError = osl_Process_E_InvalidError
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        RUSAGE_THREAD = RUSAGE_THREAD
        std::ctype_base::graph = 3076
        std::_S_ate = std::_S_ate
        std::locale::messages = 32
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::locale::ctype = 1
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        boost::algorithm::token_compress_on = boost::algorithm::token_compress_on
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        boost::detail::integer_traits_base<signed char, (signed char)-128, (signed char)127>::const_min = -128 '\200'
        boost::detail::integer_traits_base<short, (short)-32768, (short)32767>::const_min = -32768
        boost::detail::integer_traits_base<int, -2147483648, 2147483647>::const_min = -2147483648
        boost::detail::integer_traits_base<long, -9223372036854775808l, 9223372036854775807l>::const_min = -9223372036854775808   
        boost::detail::integer_traits_base<long long, -9223372036854775808ll, 9223372036854775807ll>::const_min = -9223372036854775808
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        RUSAGE_SELF = RUSAGE_SELF
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcatMarker, std::basic_string_view<char16_t, std::char_traits<char16_t> > > >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOStringConcat = true
        std::_S_threshold = std::_S_threshold
        SAL_DETAIL_LOG_LEVEL_DEBUG = SAL_DETAIL_LOG_LEVEL_DEBUG
        std::ctype_base::upper = 256
        boost::detail::function::destroy_functor_tag = boost::detail::function::destroy_functor_tag
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char32_t, char32_t> = true
        __cxxabiv1::__class_type_info::__contained_public = __cxxabiv1::__class_type_info::__contained_public
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<long, 1l>::value = 1
        std::integral_constant<long, 1000000000l>::value = 1000000000
        std::integral_constant<long, 1000l>::value = 1000
        std::integral_constant<long, 1000000l>::value = 1000000
        mpl_::integral_c_tag::value = 0
        mpl_::int_<3>::value = 3
        mpl_::int_<4>::value = 4
        mpl_::int_<2>::value = 2
        mpl_::int_<-1>::value = -1
        mpl_::int_<1>::value = 1
        mpl_::int_<5>::value = 5
        mpl_::int_<6>::value = 6
        mpl_::int_<7>::value = 7
        mpl_::int_<8>::value = 8
        mpl_::int_<9>::value = 9
        mpl_::int_<10>::value = 10
        mpl_::int_<11>::value = 11
        mpl_::int_<12>::value = 12
        mpl_::arg<-1>::value = -1
        mpl_::arg<1>::value = 1
        mpl_::arg<2>::value = 2
        mpl_::arg<3>::value = 3
        mpl_::arg<4>::value = 4
        mpl_::arg<5>::value = 5
        mpl_::bool_<false>::value = false
        mpl_::bool_<true>::value = true
        boost::integral_constant<bool, false>::value = false
        boost::integral_constant<bool, true>::value = true
        mpl_::int_<3>::value = 3
        mpl_::int_<-1>::value = -1
        mpl_::int_<1>::value = 1
        mpl_::int_<2>::value = 2
        mpl_::int_<4>::value = 4
        mpl_::int_<5>::value = 5
        mpl_::int_<6>::value = 6
        mpl_::int_<7>::value = 7
        mpl_::int_<8>::value = 8
        mpl_::int_<9>::value = 9
        mpl_::int_<10>::value = 10
        mpl_::int_<11>::value = 11
        mpl_::int_<12>::value = 12
        boost::integral_constant<unsigned long, 8ul>::value = 8
        std::ctype_base::space = 8192
        std::ctype_base::digit = 2048
        SAL_DETAIL_LOG_LEVEL_WARN = SAL_DETAIL_LOG_LEVEL_WARN
        std::locale::all = 63
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::round_toward_zero = std::round_toward_zero
        __cxxabiv1::__class_type_info::__contained_virtual_mask = __cxxabiv1::__class_type_info::__not_contained
        osl_Process_E_None = osl_Process_E_None
        std::_S_ios_openmode_min = std::_S_ios_openmode_min
        std::is_array_v<wchar_t> = false
        std::is_array_v<wchar_t> = false
        boost::detail::function::check_functor_type_tag = boost::detail::function::check_functor_type_tag
        osl_Process_E_TimedOut = osl_Process_E_TimedOut
        std::ctype_base::alpha = 1024
        __cxxabiv1::__class_type_info::__unknown = __cxxabiv1::__class_type_info::__unknown
        boost::algorithm::token_compress_off = boost::algorithm::token_compress_off
        std::memory_order_consume = std::memory_order_consume
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd1 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd1 = 1
        std::_S_app = std::_S_app
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd2 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd2 = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        osl_Process_E_FORCE_EQUAL_SIZE = osl_Process_E_FORCE_EQUAL_SIZE
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        std::locale::time = 8
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        __cxxabiv1::__class_type_info::__contained_mask = __cxxabiv1::__class_type_info::__contained_mask
        std::denorm_present = std::denorm_present
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        boost::detail::function::get_functor_type_tag = boost::detail::function::get_functor_type_tag
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcatMarker, std::basic_string_view<char16_t, std::char_traits<char16_t> > > >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [14]>::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOUStringConcat = false
        SAL_DETAIL_LOG_ACTION_LOG = SAL_DETAIL_LOG_ACTION_LOG
        std::locale::none = 0
        std::ctype_base::cntrl = 2
        SAL_DETAIL_LOG_ACTION_FATAL = SAL_DETAIL_LOG_ACTION_FATAL
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::is_integral_v<unsigned char> = true
        std::is_integral_v<unsigned char> = true
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::ctype_base::blank = 1
        std::locale::numeric = 2
        std::is_standard_layout_v<wchar_t> = true
        std::is_standard_layout_v<wchar_t> = true
        RUSAGE_CHILDREN = RUSAGE_CHILDREN
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        std::basic_string_view<char16_t, std::char_traits<char16_t> >::npos = 18446744073709551615
        std::is_trivial_v<char32_t> = true
        std::is_trivial_v<char32_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true
#35 0x00aaaaaab5da4936 in main () at /home/infinity/libreoffice/sal/cppunittester/cppunittester.cxx:616
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        __gnu_cxx::__default_lock_policy = __gnu_cxx::_S_mutex
        std::__ioinit = {static _S_refcount = <optimized out>, static _S_synced_with_stdio = <optimized out>}
        rtl::detail::surrogatesLowFirst = 56320
        rtl::detail::surrogatesLowFirst = 56320
        rtl::detail::surrogatesHighFirst = 55296
        rtl::detail::surrogatesHighFirst = 55296
        rtl::detail::surrogatesLowLast = 57343
        rtl::detail::surrogatesLowLast = 57343
        sal::detail::InitializeSoffice = -1
        sal::detail::InitializeSoffice = -1
        rtl::detail::surrogatesHighLast = 56319
        rtl::detail::surrogatesHighLast = 56319
        std::memory_order_seq_cst = std::memory_order_seq_cst
        std::ctype_base::lower = 512
        std::locale::collate = 4
        __cxxabiv1::__class_type_info::__not_contained = __cxxabiv1::__class_type_info::__not_contained
        std::ctype_base::print = 16384
        std::ratio<1, 1000000000>::den = 1000000000
        std::ratio<1, 1>::den = 1
        std::ratio<3600, 1>::den = 1
        std::ratio<60, 1>::den = 1
        std::ratio<1, 1000>::den = 1000
        std::ratio<1, 1000000>::den = 1000000
        std::ratio<1000000000, 1>::den = 1
        std::ratio<1l, 1000000000l>::den = 1000000000
        std::ratio<1l, 1l>::den = 1
        std::ratio<3600l, 1l>::den = 1
        std::ratio<60l, 1l>::den = 1
        std::ratio<1l, 1000l>::den = 1000
        std::ratio<1l, 1000000l>::den = 1000000
        std::ratio<1000000000l, 1l>::den = 1
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<__int128 unsigned>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        std::__numeric_limits_base::tinyness_before = false
        std::numeric_limits<bool>::tinyness_before = false
        std::numeric_limits<char>::tinyness_before = false
        std::numeric_limits<signed char>::tinyness_before = false
        std::numeric_limits<unsigned char>::tinyness_before = false
        std::numeric_limits<wchar_t>::tinyness_before = false
        std::numeric_limits<char16_t>::tinyness_before = false
        std::numeric_limits<char32_t>::tinyness_before = false
        std::numeric_limits<short>::tinyness_before = false
        std::numeric_limits<unsigned short>::tinyness_before = false
        std::numeric_limits<int>::tinyness_before = false
        std::numeric_limits<unsigned int>::tinyness_before = false
        std::numeric_limits<long>::tinyness_before = false
        std::numeric_limits<unsigned long>::tinyness_before = false
        std::numeric_limits<long long>::tinyness_before = false
        std::numeric_limits<unsigned long long>::tinyness_before = false
        std::numeric_limits<__int128>::tinyness_before = false
        std::numeric_limits<unsigned __int128>::tinyness_before = false
        std::numeric_limits<float>::tinyness_before = false
        std::numeric_limits<double>::tinyness_before = false
        std::numeric_limits<long double>::tinyness_before = false
        boost::detail::integer_traits_base<signed char, (signed char)-128, (signed char)127>::const_max = 127 '\177'
        boost::detail::integer_traits_base<unsigned char, (unsigned char)0, (unsigned char)255>::const_max = 255 '\377'
        boost::detail::integer_traits_base<short, (short)-32768, (short)32767>::const_max = 32767
        boost::detail::integer_traits_base<unsigned short, (unsigned short)0, (unsigned short)65535>::const_max = 65535
        boost::detail::integer_traits_base<int, -2147483648, 2147483647>::const_max = 2147483647
        boost::detail::integer_traits_base<unsigned int, 0u, 4294967295u>::const_max = 4294967295
        boost::detail::integer_traits_base<long, -9223372036854775808l, 9223372036854775807l>::const_max = 9223372036854775807    
        boost::detail::integer_traits_base<unsigned long, 0ul, 18446744073709551615ul>::const_max = 18446744073709551615
        boost::detail::integer_traits_base<long long, -9223372036854775808ll, 9223372036854775807ll>::const_max = 9223372036854775807
        boost::detail::integer_traits_base<unsigned long long, 0ull, 18446744073709551615ull>::const_max = 18446744073709551615   
        std::ratio<1, 1000000000>::num = 1
        std::ratio<1, 1>::num = 1
        std::ratio<3600, 1>::num = 3600
        std::ratio<60, 1>::num = 60
        std::ratio<1, 1000>::num = 1
        std::ratio<1, 1000000>::num = 1
        std::ratio<1000000000, 1>::num = 1000000000
        std::ratio<1l, 1000000000l>::num = 1
        std::ratio<1l, 1l>::num = 1
        std::ratio<3600l, 1l>::num = 3600
        std::ratio<60l, 1l>::num = 60
        std::ratio<1l, 1000l>::num = 1
        std::ratio<1l, 1000000l>::num = 1
        std::ratio<1000000000l, 1l>::num = 1000000000
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<__int128 unsigned>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::radix = 0
        std::numeric_limits<bool>::radix = 2
        std::numeric_limits<char>::radix = 2
        std::numeric_limits<signed char>::radix = 2
        std::numeric_limits<unsigned char>::radix = 2
        std::numeric_limits<wchar_t>::radix = 2
        std::numeric_limits<char16_t>::radix = 2
        std::numeric_limits<char32_t>::radix = 2
        std::numeric_limits<short>::radix = 2
        std::numeric_limits<unsigned short>::radix = 2
        std::numeric_limits<int>::radix = 2
        std::numeric_limits<unsigned int>::radix = 2
        std::numeric_limits<long>::radix = 2
        std::numeric_limits<unsigned long>::radix = 2
        std::numeric_limits<long long>::radix = 2
        std::numeric_limits<unsigned long long>::radix = 2
        std::numeric_limits<__int128>::radix = 2
        std::numeric_limits<unsigned __int128>::radix = 2
        std::numeric_limits<float>::radix = 2
        std::numeric_limits<double>::radix = 2
        std::numeric_limits<long double>::radix = 2
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<__int128 unsigned>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        std::__numeric_limits_base::digits10 = 0
        std::numeric_limits<bool>::digits10 = 0
        std::numeric_limits<char>::digits10 = 2
        std::numeric_limits<signed char>::digits10 = 2
        std::numeric_limits<unsigned char>::digits10 = 2
        std::numeric_limits<wchar_t>::digits10 = 9
        std::numeric_limits<char16_t>::digits10 = 4
        std::numeric_limits<char32_t>::digits10 = 9
        std::numeric_limits<short>::digits10 = 4
        std::numeric_limits<unsigned short>::digits10 = 4
        std::numeric_limits<int>::digits10 = 9
        std::numeric_limits<unsigned int>::digits10 = 9
        std::numeric_limits<long>::digits10 = 18
        std::numeric_limits<unsigned long>::digits10 = 19
        std::numeric_limits<long long>::digits10 = 18
        std::numeric_limits<unsigned long long>::digits10 = 19
        std::numeric_limits<__int128>::digits10 = 38
        std::numeric_limits<unsigned __int128>::digits10 = 38
        std::numeric_limits<float>::digits10 = 6
        std::numeric_limits<double>::digits10 = 15
        std::numeric_limits<long double>::digits10 = 33
        __cxxabiv1::__class_type_info::__contained_ambig = __cxxabiv1::__class_type_info::__contained_ambig
        __gnu_cxx::_S_atomic = __gnu_cxx::_S_atomic
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<__int128 unsigned>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::min_exponent = 0
        std::numeric_limits<bool>::min_exponent = 0
        std::numeric_limits<char>::min_exponent = 0
        std::numeric_limits<signed char>::min_exponent = 0
        std::numeric_limits<unsigned char>::min_exponent = 0
        std::numeric_limits<wchar_t>::min_exponent = 0
        std::numeric_limits<char16_t>::min_exponent = 0
        std::numeric_limits<char32_t>::min_exponent = 0
        std::numeric_limits<short>::min_exponent = 0
        std::numeric_limits<unsigned short>::min_exponent = 0
        std::numeric_limits<int>::min_exponent = 0
        std::numeric_limits<unsigned int>::min_exponent = 0
        std::numeric_limits<long>::min_exponent = 0
        std::numeric_limits<unsigned long>::min_exponent = 0
        std::numeric_limits<long long>::min_exponent = 0
        std::numeric_limits<unsigned long long>::min_exponent = 0
        std::numeric_limits<__int128>::min_exponent = 0
        std::numeric_limits<unsigned __int128>::min_exponent = 0
        std::numeric_limits<float>::min_exponent = -125
        std::numeric_limits<double>::min_exponent = -1021
        std::numeric_limits<long double>::min_exponent = -16381
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<__int128 unsigned>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::__numeric_limits_base::max_exponent = 0
        std::numeric_limits<bool>::max_exponent = 0
        std::numeric_limits<char>::max_exponent = 0
        std::numeric_limits<signed char>::max_exponent = 0
        std::numeric_limits<unsigned char>::max_exponent = 0
        std::numeric_limits<wchar_t>::max_exponent = 0
        std::numeric_limits<char16_t>::max_exponent = 0
        std::numeric_limits<char32_t>::max_exponent = 0
        std::numeric_limits<short>::max_exponent = 0
        std::numeric_limits<unsigned short>::max_exponent = 0
        std::numeric_limits<int>::max_exponent = 0
        std::numeric_limits<unsigned int>::max_exponent = 0
        std::numeric_limits<long>::max_exponent = 0
        std::numeric_limits<unsigned long>::max_exponent = 0
        std::numeric_limits<long long>::max_exponent = 0
        std::numeric_limits<unsigned long long>::max_exponent = 0
        std::numeric_limits<__int128>::max_exponent = 0
        std::numeric_limits<unsigned __int128>::max_exponent = 0
        std::numeric_limits<float>::max_exponent = 128
        std::numeric_limits<double>::max_exponent = 1024
        std::numeric_limits<long double>::max_exponent = 16384
        std::ctype_base::punct = 4
        std::_S_ios_openmode_max = std::_S_ios_openmode_max
        osl_Process_E_NotFound = osl_Process_E_NotFound
        std::memory_order_acq_rel = std::memory_order_acq_rel
        boost::detail::function::clone_functor_tag = boost::detail::function::clone_functor_tag
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<__int128 unsigned>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        std::__numeric_limits_base::traps = false
        std::numeric_limits<bool>::traps = true
        std::numeric_limits<char>::traps = true
        std::numeric_limits<signed char>::traps = true
        std::numeric_limits<unsigned char>::traps = true
        std::numeric_limits<wchar_t>::traps = true
        std::numeric_limits<char16_t>::traps = true
        std::numeric_limits<char32_t>::traps = true
        std::numeric_limits<short>::traps = true
        std::numeric_limits<unsigned short>::traps = true
        std::numeric_limits<int>::traps = true
        std::numeric_limits<unsigned int>::traps = true
        std::numeric_limits<long>::traps = true
        std::numeric_limits<unsigned long>::traps = true
        std::numeric_limits<long long>::traps = true
        std::numeric_limits<unsigned long long>::traps = true
        std::numeric_limits<__int128>::traps = true
        std::numeric_limits<unsigned __int128>::traps = true
        std::numeric_limits<float>::traps = false
        std::numeric_limits<double>::traps = false
        std::numeric_limits<long double>::traps = false
        __cxxabiv1::__class_type_info::__contained_public_mask = __cxxabiv1::__class_type_info::__contained_ambig
        std::denorm_absent = std::denorm_absent
        std::memory_order_relaxed = std::memory_order_relaxed
        std::round_toward_infinity = std::round_toward_infinity
        std::is_standard_layout_v<char32_t> = true
        std::is_standard_layout_v<char32_t> = true
        SAL_DETAIL_LOG_ACTION_IGNORE = SAL_DETAIL_LOG_ACTION_IGNORE
        std::is_standard_layout_v<char16_t> = true
        std::is_standard_layout_v<char16_t> = true
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::chrono::_V2::system_clock::is_steady = false
        std::chrono::_V2::steady_clock::is_steady = true
        std::filesystem::__file_clock::is_steady = false
        std::_S_bin = std::_S_bin
        __gnu_cxx::__numeric_traits_integer<int>::__max = 2147483647
        __gnu_cxx::__numeric_traits_integer<char>::__max = 255 '\377'
        __gnu_cxx::__numeric_traits_integer<long>::__max = 9223372036854775807
        __gnu_cxx::__numeric_traits_integer<short>::__max = 32767
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__max = 18446744073709551615
        std::is_same_v<char, char> = true
        osl_Process_E_Unknown = osl_Process_E_Unknown
        std::is_same_v<char, char> = true
        std::_S_out = std::_S_out
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128 unsigned>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::__numeric_limits_base::has_denorm = std::denorm_absent
        std::numeric_limits<bool>::has_denorm = std::denorm_absent
        std::numeric_limits<char>::has_denorm = std::denorm_absent
        std::numeric_limits<signed char>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned char>::has_denorm = std::denorm_absent
        std::numeric_limits<wchar_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char16_t>::has_denorm = std::denorm_absent
        std::numeric_limits<char32_t>::has_denorm = std::denorm_absent
        std::numeric_limits<short>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned short>::has_denorm = std::denorm_absent
        std::numeric_limits<int>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned int>::has_denorm = std::denorm_absent
        std::numeric_limits<long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long>::has_denorm = std::denorm_absent
        std::numeric_limits<long long>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned long long>::has_denorm = std::denorm_absent
        std::numeric_limits<__int128>::has_denorm = std::denorm_absent
        std::numeric_limits<unsigned __int128>::has_denorm = std::denorm_absent
        std::numeric_limits<float>::has_denorm = std::denorm_present
        std::numeric_limits<double>::has_denorm = std::denorm_present
        std::numeric_limits<long double>::has_denorm = std::denorm_present
        std::memory_order_release = std::memory_order_release
        std::_S_trunc = std::_S_trunc
        std::round_toward_neg_infinity = std::round_toward_neg_infinity
        __cxxabiv1::__class_type_info::__contained_private = __cxxabiv1::__class_type_info::__contained_mask
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<__int128 unsigned>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        std::__numeric_limits_base::has_infinity = false
        std::numeric_limits<bool>::has_infinity = false
        std::numeric_limits<char>::has_infinity = false
        std::numeric_limits<signed char>::has_infinity = false
        std::numeric_limits<unsigned char>::has_infinity = false
        std::numeric_limits<wchar_t>::has_infinity = false
        std::numeric_limits<char16_t>::has_infinity = false
        std::numeric_limits<char32_t>::has_infinity = false
        std::numeric_limits<short>::has_infinity = false
        std::numeric_limits<unsigned short>::has_infinity = false
        std::numeric_limits<int>::has_infinity = false
        std::numeric_limits<unsigned int>::has_infinity = false
        std::numeric_limits<long>::has_infinity = false
        std::numeric_limits<unsigned long>::has_infinity = false
        std::numeric_limits<long long>::has_infinity = false
        std::numeric_limits<unsigned long long>::has_infinity = false
        std::numeric_limits<__int128>::has_infinity = false
        std::numeric_limits<unsigned __int128>::has_infinity = false
        std::numeric_limits<float>::has_infinity = true
        std::numeric_limits<double>::has_infinity = true
        std::numeric_limits<long double>::has_infinity = true
        osl_Process_E_NoPermission = osl_Process_E_NoPermission
        std::memory_order_acquire = std::memory_order_acquire
        std::denorm_indeterminate = std::denorm_indeterminate
        __gnu_cxx::_S_single = __gnu_cxx::_S_single
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [24], void>::length = 23
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [6], void>::length = 5
        rtl::libreoffice_internal::ConstCharArrayDetector<char const [12], void>::length = 11
        std::round_to_nearest = std::round_to_nearest
        std::is_array_v<char32_t> = false
        std::is_array_v<char32_t> = false
        SAL_DETAIL_LOG_LEVEL_INFO = SAL_DETAIL_LOG_LEVEL_INFO
        std::is_array_v<char16_t> = false
        std::is_array_v<char16_t> = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<__int128 unsigned>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::__numeric_limits_base::is_integer = false
        std::numeric_limits<bool>::is_integer = true
        std::numeric_limits<char>::is_integer = true
        std::numeric_limits<signed char>::is_integer = true
        std::numeric_limits<unsigned char>::is_integer = true
        std::numeric_limits<wchar_t>::is_integer = true
        std::numeric_limits<char16_t>::is_integer = true
        std::numeric_limits<char32_t>::is_integer = true
        std::numeric_limits<short>::is_integer = true
        std::numeric_limits<unsigned short>::is_integer = true
        std::numeric_limits<int>::is_integer = true
        std::numeric_limits<unsigned int>::is_integer = true
        std::numeric_limits<long>::is_integer = true
        std::numeric_limits<unsigned long>::is_integer = true
        std::numeric_limits<long long>::is_integer = true
        std::numeric_limits<unsigned long long>::is_integer = true
        std::numeric_limits<__int128>::is_integer = true
        std::numeric_limits<unsigned __int128>::is_integer = true
        std::numeric_limits<float>::is_integer = false
        std::numeric_limits<double>::is_integer = false
        std::numeric_limits<long double>::is_integer = false
        std::is_standard_layout_v<char> = true
        std::is_standard_layout_v<char> = true
        boost::detail::function::move_functor_tag = boost::detail::function::move_functor_tag
        std::locale::monetary = 16
        std::_S_ios_openmode_end = std::_S_ios_openmode_end
        std::is_array_v<char> = false
        std::is_array_v<char> = false
        __gnu_cxx::__numeric_traits_integer<int>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<char>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<long>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<short>::__is_signed = true
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__is_signed = false
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__is_signed = false
        std::ctype_base::xdigit = 4096
        std::_S_in = std::_S_in
        std::is_integral_v<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > = false
        std::is_integral_v<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > = false
        std::ctype_base::alnum = 3072
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        osl_Process_E_InvalidError = osl_Process_E_InvalidError
        std::is_same_v<CppUnit::TestFactory*, CppUnit::TestFactory*> = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<__int128 unsigned>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        std::__numeric_limits_base::is_specialized = false
        std::numeric_limits<bool>::is_specialized = true
        std::numeric_limits<char>::is_specialized = true
        std::numeric_limits<signed char>::is_specialized = true
        std::numeric_limits<unsigned char>::is_specialized = true
        std::numeric_limits<wchar_t>::is_specialized = true
        std::numeric_limits<char16_t>::is_specialized = true
        std::numeric_limits<char32_t>::is_specialized = true
        std::numeric_limits<short>::is_specialized = true
        std::numeric_limits<unsigned short>::is_specialized = true
        std::numeric_limits<int>::is_specialized = true
        std::numeric_limits<unsigned int>::is_specialized = true
        std::numeric_limits<long>::is_specialized = true
        std::numeric_limits<unsigned long>::is_specialized = true
        std::numeric_limits<long long>::is_specialized = true
        std::numeric_limits<unsigned long long>::is_specialized = true
        std::numeric_limits<__int128>::is_specialized = true
        std::numeric_limits<unsigned __int128>::is_specialized = true
        std::numeric_limits<float>::is_specialized = true
        std::numeric_limits<double>::is_specialized = true
        std::numeric_limits<long double>::is_specialized = true
        RUSAGE_THREAD = RUSAGE_THREAD
        std::ctype_base::graph = 3076
        std::_S_ate = std::_S_ate
        std::locale::messages = 32
        std::is_same_v<wchar_t, wchar_t> = true
        std::is_same_v<wchar_t, wchar_t> = true
        std::locale::ctype = 1
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        std::__numeric_limits_base::max_exponent10 = 0
        std::numeric_limits<bool>::max_exponent10 = 0
        std::numeric_limits<char>::max_exponent10 = 0
        std::numeric_limits<signed char>::max_exponent10 = 0
        std::numeric_limits<unsigned char>::max_exponent10 = 0
        std::numeric_limits<wchar_t>::max_exponent10 = 0
        std::numeric_limits<char16_t>::max_exponent10 = 0
        std::numeric_limits<char32_t>::max_exponent10 = 0
        std::numeric_limits<short>::max_exponent10 = 0
        std::numeric_limits<unsigned short>::max_exponent10 = 0
        std::numeric_limits<int>::max_exponent10 = 0
        std::numeric_limits<unsigned int>::max_exponent10 = 0
        std::numeric_limits<long>::max_exponent10 = 0
        std::numeric_limits<unsigned long>::max_exponent10 = 0
        std::numeric_limits<long long>::max_exponent10 = 0
        std::numeric_limits<unsigned long long>::max_exponent10 = 0
        std::numeric_limits<__int128>::max_exponent10 = 0
        std::numeric_limits<unsigned __int128>::max_exponent10 = 0
        std::numeric_limits<float>::max_exponent10 = 38
        std::numeric_limits<double>::max_exponent10 = 308
        std::numeric_limits<long double>::max_exponent10 = 4932
        boost::algorithm::token_compress_on = boost::algorithm::token_compress_on
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<__int128 unsigned>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        std::__numeric_limits_base::has_quiet_NaN = false
        std::numeric_limits<bool>::has_quiet_NaN = false
        std::numeric_limits<char>::has_quiet_NaN = false
        std::numeric_limits<signed char>::has_quiet_NaN = false
        std::numeric_limits<unsigned char>::has_quiet_NaN = false
        std::numeric_limits<wchar_t>::has_quiet_NaN = false
        std::numeric_limits<char16_t>::has_quiet_NaN = false
        std::numeric_limits<char32_t>::has_quiet_NaN = false
        std::numeric_limits<short>::has_quiet_NaN = false
        std::numeric_limits<unsigned short>::has_quiet_NaN = false
        std::numeric_limits<int>::has_quiet_NaN = false
        std::numeric_limits<unsigned int>::has_quiet_NaN = false
        std::numeric_limits<long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long>::has_quiet_NaN = false
        std::numeric_limits<long long>::has_quiet_NaN = false
        std::numeric_limits<unsigned long long>::has_quiet_NaN = false
        std::numeric_limits<__int128>::has_quiet_NaN = false
        std::numeric_limits<unsigned __int128>::has_quiet_NaN = false
        std::numeric_limits<float>::has_quiet_NaN = true
        std::numeric_limits<double>::has_quiet_NaN = true
        std::numeric_limits<long double>::has_quiet_NaN = true
        boost::detail::integer_traits_base<signed char, (signed char)-128, (signed char)127>::const_min = -128 '\200'
        boost::detail::integer_traits_base<short, (short)-32768, (short)32767>::const_min = -32768
        boost::detail::integer_traits_base<int, -2147483648, 2147483647>::const_min = -2147483648
        boost::detail::integer_traits_base<long, -9223372036854775808l, 9223372036854775807l>::const_min = -9223372036854775808   
        boost::detail::integer_traits_base<long long, -9223372036854775808ll, 9223372036854775807ll>::const_min = -9223372036854775808
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<__int128 unsigned>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        std::__numeric_limits_base::is_exact = false
        std::numeric_limits<bool>::is_exact = true
        std::numeric_limits<char>::is_exact = true
        std::numeric_limits<signed char>::is_exact = true
        std::numeric_limits<unsigned char>::is_exact = true
        std::numeric_limits<wchar_t>::is_exact = true
        std::numeric_limits<char16_t>::is_exact = true
        std::numeric_limits<char32_t>::is_exact = true
        std::numeric_limits<short>::is_exact = true
        std::numeric_limits<unsigned short>::is_exact = true
        std::numeric_limits<int>::is_exact = true
        std::numeric_limits<unsigned int>::is_exact = true
        std::numeric_limits<long>::is_exact = true
        std::numeric_limits<unsigned long>::is_exact = true
        std::numeric_limits<long long>::is_exact = true
        std::numeric_limits<unsigned long long>::is_exact = true
        std::numeric_limits<__int128>::is_exact = true
        std::numeric_limits<unsigned __int128>::is_exact = true
        std::numeric_limits<float>::is_exact = false
        std::numeric_limits<double>::is_exact = false
        std::numeric_limits<long double>::is_exact = false
        RUSAGE_SELF = RUSAGE_SELF
        __gnu_cxx::__numeric_traits_floating<float>::__max_exponent10 = 38
        __gnu_cxx::__numeric_traits_floating<double>::__max_exponent10 = 308
        __gnu_cxx::__numeric_traits_floating<long double>::__max_exponent10 = 4932
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcatMarker, std::basic_string_view<char16_t, std::char_traits<char16_t> > > >::allowOStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOStringConcat = true
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOStringConcat = false
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOStringConcat = true
        std::_S_threshold = std::_S_threshold
        SAL_DETAIL_LOG_LEVEL_DEBUG = SAL_DETAIL_LOG_LEVEL_DEBUG
        std::ctype_base::upper = 256
        boost::detail::function::destroy_functor_tag = boost::detail::function::destroy_functor_tag
        std::is_trivial_v<char> = true
        std::is_trivial_v<char> = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<__int128 unsigned>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char32_t, char32_t> = true
        std::__numeric_limits_base::is_bounded = false
        std::numeric_limits<bool>::is_bounded = true
        std::numeric_limits<char>::is_bounded = true
        std::numeric_limits<signed char>::is_bounded = true
        std::numeric_limits<unsigned char>::is_bounded = true
        std::numeric_limits<wchar_t>::is_bounded = true
        std::numeric_limits<char16_t>::is_bounded = true
        std::numeric_limits<char32_t>::is_bounded = true
        std::numeric_limits<short>::is_bounded = true
        std::numeric_limits<unsigned short>::is_bounded = true
        std::numeric_limits<int>::is_bounded = true
        std::numeric_limits<unsigned int>::is_bounded = true
        std::numeric_limits<long>::is_bounded = true
        std::numeric_limits<unsigned long>::is_bounded = true
        std::numeric_limits<long long>::is_bounded = true
        std::numeric_limits<unsigned long long>::is_bounded = true
        std::numeric_limits<__int128>::is_bounded = true
        std::numeric_limits<unsigned __int128>::is_bounded = true
        std::numeric_limits<float>::is_bounded = true
        std::numeric_limits<double>::is_bounded = true
        std::numeric_limits<long double>::is_bounded = true
        std::is_same_v<char16_t, char16_t> = true
        std::is_same_v<char32_t, char32_t> = true
        __cxxabiv1::__class_type_info::__contained_public = __cxxabiv1::__class_type_info::__contained_public
        std::integral_constant<bool, false>::value = false
        std::integral_constant<bool, true>::value = true
        std::integral_constant<unsigned long, 0ul>::value = 0
        std::integral_constant<long, 1l>::value = 1
        std::integral_constant<long, 1000000000l>::value = 1000000000
        std::integral_constant<long, 1000l>::value = 1000
        std::integral_constant<long, 1000000l>::value = 1000000
        mpl_::integral_c_tag::value = 0
        mpl_::int_<3>::value = 3
        mpl_::int_<4>::value = 4
        mpl_::int_<2>::value = 2
        mpl_::int_<-1>::value = -1
        mpl_::int_<1>::value = 1
        mpl_::int_<5>::value = 5
        mpl_::int_<6>::value = 6
        mpl_::int_<7>::value = 7
        mpl_::int_<8>::value = 8
        mpl_::int_<9>::value = 9
        mpl_::int_<10>::value = 10
        mpl_::int_<11>::value = 11
        mpl_::int_<12>::value = 12
        mpl_::arg<-1>::value = -1
        mpl_::arg<1>::value = 1
        mpl_::arg<2>::value = 2
        mpl_::arg<3>::value = 3
        mpl_::arg<4>::value = 4
        mpl_::arg<5>::value = 5
        mpl_::bool_<false>::value = false
        mpl_::bool_<true>::value = true
        boost::integral_constant<bool, false>::value = false
        boost::integral_constant<bool, true>::value = true
        mpl_::int_<3>::value = 3
        mpl_::int_<-1>::value = -1
        mpl_::int_<1>::value = 1
        mpl_::int_<2>::value = 2
        mpl_::int_<4>::value = 4
        mpl_::int_<5>::value = 5
        mpl_::int_<6>::value = 6
        mpl_::int_<7>::value = 7
        mpl_::int_<8>::value = 8
        mpl_::int_<9>::value = 9
        mpl_::int_<10>::value = 10
        mpl_::int_<11>::value = 11
        mpl_::int_<12>::value = 12
        boost::integral_constant<unsigned long, 8ul>::value = 8
        std::ctype_base::space = 8192
        std::ctype_base::digit = 2048
        SAL_DETAIL_LOG_LEVEL_WARN = SAL_DETAIL_LOG_LEVEL_WARN
        std::locale::all = 63
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<__int128 unsigned>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__numeric_limits_base::has_signaling_NaN = false
        std::numeric_limits<bool>::has_signaling_NaN = false
        std::numeric_limits<char>::has_signaling_NaN = false
        std::numeric_limits<signed char>::has_signaling_NaN = false
        std::numeric_limits<unsigned char>::has_signaling_NaN = false
        std::numeric_limits<wchar_t>::has_signaling_NaN = false
        std::numeric_limits<char16_t>::has_signaling_NaN = false
        std::numeric_limits<char32_t>::has_signaling_NaN = false
        std::numeric_limits<short>::has_signaling_NaN = false
        std::numeric_limits<unsigned short>::has_signaling_NaN = false
        std::numeric_limits<int>::has_signaling_NaN = false
        std::numeric_limits<unsigned int>::has_signaling_NaN = false
        std::numeric_limits<long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long>::has_signaling_NaN = false
        std::numeric_limits<long long>::has_signaling_NaN = false
        std::numeric_limits<unsigned long long>::has_signaling_NaN = false
        std::numeric_limits<__int128>::has_signaling_NaN = false
        std::numeric_limits<unsigned __int128>::has_signaling_NaN = false
        std::numeric_limits<float>::has_signaling_NaN = true
        std::numeric_limits<double>::has_signaling_NaN = true
        std::numeric_limits<long double>::has_signaling_NaN = true
        std::__make_unsigned_selector_base::_List<unsigned int, unsigned long, unsigned long long>::__size = 4
        std::__make_unsigned_selector_base::_List<unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 2    
        std::__make_unsigned_selector_base::_List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>::__size = 1
        std::round_toward_zero = std::round_toward_zero
        __cxxabiv1::__class_type_info::__contained_virtual_mask = __cxxabiv1::__class_type_info::__not_contained
        osl_Process_E_None = osl_Process_E_None
        std::_S_ios_openmode_min = std::_S_ios_openmode_min
        std::is_array_v<wchar_t> = false
        std::is_array_v<wchar_t> = false
        boost::detail::function::check_functor_type_tag = boost::detail::function::check_functor_type_tag
        osl_Process_E_TimedOut = osl_Process_E_TimedOut
        std::ctype_base::alpha = 1024
        __cxxabiv1::__class_type_info::__unknown = __cxxabiv1::__class_type_info::__unknown
        boost::algorithm::token_compress_off = boost::algorithm::token_compress_off
        std::memory_order_consume = std::memory_order_consume
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd1 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd1 = 1
        std::_S_app = std::_S_app
        std::__ratio_multiply<std::ratio<1, 1000000000>, std::ratio<1, 1> >::__gcd2 = 1
        std::__ratio_multiply<std::ratio<1, 1>, std::ratio<1000000000, 1> >::__gcd2 = 1
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<__int128 unsigned>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__numeric_limits_base::has_denorm_loss = false
        std::numeric_limits<bool>::has_denorm_loss = false
        std::numeric_limits<char>::has_denorm_loss = false
        std::numeric_limits<signed char>::has_denorm_loss = false
        std::numeric_limits<unsigned char>::has_denorm_loss = false
        std::numeric_limits<wchar_t>::has_denorm_loss = false
        std::numeric_limits<char16_t>::has_denorm_loss = false
        std::numeric_limits<char32_t>::has_denorm_loss = false
        std::numeric_limits<short>::has_denorm_loss = false
        std::numeric_limits<unsigned short>::has_denorm_loss = false
        std::numeric_limits<int>::has_denorm_loss = false
        std::numeric_limits<unsigned int>::has_denorm_loss = false
        std::numeric_limits<long>::has_denorm_loss = false
        std::numeric_limits<unsigned long>::has_denorm_loss = false
        std::numeric_limits<long long>::has_denorm_loss = false
        std::numeric_limits<unsigned long long>::has_denorm_loss = false
        std::numeric_limits<__int128>::has_denorm_loss = false
        std::numeric_limits<unsigned __int128>::has_denorm_loss = false
        std::numeric_limits<float>::has_denorm_loss = false
        std::numeric_limits<double>::has_denorm_loss = false
        std::numeric_limits<long double>::has_denorm_loss = false
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        std::__is_memcmp_ordered_with<std::byte, std::byte, true>::__value = true
        osl_Process_E_FORCE_EQUAL_SIZE = osl_Process_E_FORCE_EQUAL_SIZE
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_local_capacity
        std::locale::time = 8
        __gnu_cxx::__numeric_traits_integer<int>::__digits = 31
        __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<char>::__digits = 8
        __gnu_cxx::__numeric_traits_integer<long>::__digits = 63
        __gnu_cxx::__numeric_traits_integer<short>::__digits = 15
        __gnu_cxx::__numeric_traits_integer<unsigned long long>::__digits = 64
        __gnu_cxx::__numeric_traits_integer<unsigned int>::__digits = 32
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<__int128 unsigned>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        std::__numeric_limits_base::digits = 0
        std::numeric_limits<bool>::digits = 1
        std::numeric_limits<char>::digits = 8
        std::numeric_limits<signed char>::digits = 7
        std::numeric_limits<unsigned char>::digits = 8
        std::numeric_limits<wchar_t>::digits = 31
        std::numeric_limits<char16_t>::digits = 16
        std::numeric_limits<char32_t>::digits = 32
        std::numeric_limits<short>::digits = 15
        std::numeric_limits<unsigned short>::digits = 16
        std::numeric_limits<int>::digits = 31
        std::numeric_limits<unsigned int>::digits = 32
        std::numeric_limits<long>::digits = 63
        std::numeric_limits<unsigned long>::digits = 64
        std::numeric_limits<long long>::digits = 63
        std::numeric_limits<unsigned long long>::digits = 64
        std::numeric_limits<__int128>::digits = 127
        std::numeric_limits<unsigned __int128>::digits = 128
        std::numeric_limits<float>::digits = 24
        std::numeric_limits<double>::digits = 53
        std::numeric_limits<long double>::digits = 113
        __cxxabiv1::__class_type_info::__contained_mask = __cxxabiv1::__class_type_info::__contained_mask
        std::denorm_present = std::denorm_present
        __gnu_cxx::__numeric_traits_integer<int>::__min = -2147483648
        __gnu_cxx::__numeric_traits_integer<long>::__min = -9223372036854775808
        __gnu_cxx::__numeric_traits_integer<short>::__min = -32768
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<__int128 unsigned>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        std::__numeric_limits_base::is_iec559 = false
        std::numeric_limits<bool>::is_iec559 = false
        std::numeric_limits<char>::is_iec559 = false
        std::numeric_limits<signed char>::is_iec559 = false
        std::numeric_limits<unsigned char>::is_iec559 = false
        std::numeric_limits<wchar_t>::is_iec559 = false
        std::numeric_limits<char16_t>::is_iec559 = false
        std::numeric_limits<char32_t>::is_iec559 = false
        std::numeric_limits<short>::is_iec559 = false
        std::numeric_limits<unsigned short>::is_iec559 = false
        std::numeric_limits<int>::is_iec559 = false
        std::numeric_limits<unsigned int>::is_iec559 = false
        std::numeric_limits<long>::is_iec559 = false
        std::numeric_limits<unsigned long>::is_iec559 = false
        std::numeric_limits<long long>::is_iec559 = false
        std::numeric_limits<unsigned long long>::is_iec559 = false
        std::numeric_limits<__int128>::is_iec559 = false
        std::numeric_limits<unsigned __int128>::is_iec559 = false
        std::numeric_limits<float>::is_iec559 = true
        std::numeric_limits<double>::is_iec559 = true
        std::numeric_limits<long double>::is_iec559 = true
        boost::detail::function::get_functor_type_tag = boost::detail::function::get_functor_type_tag
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcat<rtl::OUStringConcatMarker, std::basic_string_view<char16_t, std::char_traits<char16_t> > > >::allowOUStringConcat = true
        rtl::ToStringHelper<char const [14]>::allowOUStringConcat = true
        rtl::ToStringHelper<std::basic_string_view<char, std::char_traits<char> > >::allowOUStringConcat = false
        rtl::ToStringHelper<std::basic_string_view<char16_t, std::char_traits<char16_t> > >::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringConcatMarker>::allowOUStringConcat = false
        rtl::ToStringHelper<rtl::OUStringConcatMarker>::allowOUStringConcat = true
        rtl::ToStringHelper<rtl::OStringBuffer>::allowOUStringConcat = false
        SAL_DETAIL_LOG_ACTION_LOG = SAL_DETAIL_LOG_ACTION_LOG
        std::locale::none = 0
        std::ctype_base::cntrl = 2
        SAL_DETAIL_LOG_ACTION_FATAL = SAL_DETAIL_LOG_ACTION_FATAL
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<__int128 unsigned>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::__numeric_limits_base::max_digits10 = 0
        std::numeric_limits<bool>::max_digits10 = 0
        std::numeric_limits<char>::max_digits10 = 0
        std::numeric_limits<signed char>::max_digits10 = 0
        std::numeric_limits<unsigned char>::max_digits10 = 0
        std::numeric_limits<wchar_t>::max_digits10 = 0
        std::numeric_limits<char16_t>::max_digits10 = 0
        std::numeric_limits<char32_t>::max_digits10 = 0
        std::numeric_limits<short>::max_digits10 = 0
        std::numeric_limits<unsigned short>::max_digits10 = 0
        std::numeric_limits<int>::max_digits10 = 0
        std::numeric_limits<unsigned int>::max_digits10 = 0
        std::numeric_limits<long>::max_digits10 = 0
        std::numeric_limits<unsigned long>::max_digits10 = 0
        std::numeric_limits<long long>::max_digits10 = 0
        std::numeric_limits<unsigned long long>::max_digits10 = 0
        std::numeric_limits<__int128>::max_digits10 = 0
        std::numeric_limits<unsigned __int128>::max_digits10 = 0
        std::numeric_limits<float>::max_digits10 = 9
        std::numeric_limits<double>::max_digits10 = 17
        std::numeric_limits<long double>::max_digits10 = 36
        std::is_trivial_v<wchar_t> = true
        std::is_trivial_v<wchar_t> = true
        SAL_NO_ACQUIRE = SAL_NO_ACQUIRE
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<__int128 unsigned>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::__numeric_limits_base::round_style = std::round_toward_zero
        std::numeric_limits<bool>::round_style = std::round_toward_zero
        std::numeric_limits<char>::round_style = std::round_toward_zero
        std::numeric_limits<signed char>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned char>::round_style = std::round_toward_zero
        std::numeric_limits<wchar_t>::round_style = std::round_toward_zero
        std::numeric_limits<char16_t>::round_style = std::round_toward_zero
        std::numeric_limits<char32_t>::round_style = std::round_toward_zero
        std::numeric_limits<short>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned short>::round_style = std::round_toward_zero
        std::numeric_limits<int>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned int>::round_style = std::round_toward_zero
        std::numeric_limits<long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long>::round_style = std::round_toward_zero
        std::numeric_limits<long long>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned long long>::round_style = std::round_toward_zero
        std::numeric_limits<__int128>::round_style = std::round_toward_zero
        std::numeric_limits<unsigned __int128>::round_style = std::round_toward_zero
        std::numeric_limits<float>::round_style = std::round_to_nearest
        std::numeric_limits<double>::round_style = std::round_to_nearest
        std::numeric_limits<long double>::round_style = std::round_to_nearest
        std::is_integral_v<unsigned char> = true
        std::is_integral_v<unsigned char> = true
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<__int128 unsigned>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        std::__numeric_limits_base::min_exponent10 = 0
        std::numeric_limits<bool>::min_exponent10 = 0
        std::numeric_limits<char>::min_exponent10 = 0
        std::numeric_limits<signed char>::min_exponent10 = 0
        std::numeric_limits<unsigned char>::min_exponent10 = 0
        std::numeric_limits<wchar_t>::min_exponent10 = 0
        std::numeric_limits<char16_t>::min_exponent10 = 0
        std::numeric_limits<char32_t>::min_exponent10 = 0
        std::numeric_limits<short>::min_exponent10 = 0
        std::numeric_limits<unsigned short>::min_exponent10 = 0
        std::numeric_limits<int>::min_exponent10 = 0
        std::numeric_limits<unsigned int>::min_exponent10 = 0
        std::numeric_limits<long>::min_exponent10 = 0
        std::numeric_limits<unsigned long>::min_exponent10 = 0
        std::numeric_limits<long long>::min_exponent10 = 0
        std::numeric_limits<unsigned long long>::min_exponent10 = 0
        std::numeric_limits<__int128>::min_exponent10 = 0
        std::numeric_limits<unsigned __int128>::min_exponent10 = 0
        std::numeric_limits<float>::min_exponent10 = -37
        std::numeric_limits<double>::min_exponent10 = -307
        std::numeric_limits<long double>::min_exponent10 = -4931
        __gnu_cxx::_S_mutex = __gnu_cxx::_S_mutex
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<__int128 unsigned>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::__numeric_limits_base::is_signed = false
        std::numeric_limits<bool>::is_signed = false
        std::numeric_limits<char>::is_signed = false
        std::numeric_limits<signed char>::is_signed = true
        std::numeric_limits<unsigned char>::is_signed = false
        std::numeric_limits<wchar_t>::is_signed = true
        std::numeric_limits<char16_t>::is_signed = false
        std::numeric_limits<char32_t>::is_signed = false
        std::numeric_limits<short>::is_signed = true
        std::numeric_limits<unsigned short>::is_signed = false
        std::numeric_limits<int>::is_signed = true
        std::numeric_limits<unsigned int>::is_signed = false
        std::numeric_limits<long>::is_signed = true
        std::numeric_limits<unsigned long>::is_signed = false
        std::numeric_limits<long long>::is_signed = true
        std::numeric_limits<unsigned long long>::is_signed = false
        std::numeric_limits<__int128>::is_signed = true
        std::numeric_limits<unsigned __int128>::is_signed = false
        std::numeric_limits<float>::is_signed = true
        std::numeric_limits<double>::is_signed = true
        std::numeric_limits<long double>::is_signed = true
        std::round_indeterminate = std::round_indeterminate
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<__int128 unsigned>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::__numeric_limits_base::is_modulo = false
        std::numeric_limits<bool>::is_modulo = false
        std::numeric_limits<char>::is_modulo = true
        std::numeric_limits<signed char>::is_modulo = false
        std::numeric_limits<unsigned char>::is_modulo = true
        std::numeric_limits<wchar_t>::is_modulo = false
        std::numeric_limits<char16_t>::is_modulo = true
        std::numeric_limits<char32_t>::is_modulo = true
        std::numeric_limits<short>::is_modulo = false
        std::numeric_limits<unsigned short>::is_modulo = true
        std::numeric_limits<int>::is_modulo = false
        std::numeric_limits<unsigned int>::is_modulo = true
        std::numeric_limits<long>::is_modulo = false
        std::numeric_limits<unsigned long>::is_modulo = true
        std::numeric_limits<long long>::is_modulo = false
        std::numeric_limits<unsigned long long>::is_modulo = true
        std::numeric_limits<__int128>::is_modulo = false
        std::numeric_limits<unsigned __int128>::is_modulo = true
        std::numeric_limits<float>::is_modulo = false
        std::numeric_limits<double>::is_modulo = false
        std::numeric_limits<long double>::is_modulo = false
        std::ctype_base::blank = 1
        std::locale::numeric = 2
        std::is_standard_layout_v<wchar_t> = true
        std::is_standard_layout_v<wchar_t> = true
        RUSAGE_CHILDREN = RUSAGE_CHILDREN
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos = 18446744073709551615
        std::basic_string_view<char16_t, std::char_traits<char16_t> >::npos = 18446744073709551615
        std::is_trivial_v<char32_t> = true
        std::is_trivial_v<char32_t> = true
        std::is_trivial_v<char16_t> = true
        std::is_trivial_v<char16_t> = true


Error: a unit test failed, please do one of:

make CppunitTest_cppuhelper_qa_weak CPPUNITTRACE="gdb --args"
    # for interactive debugging on Linux
make CppunitTest_cppuhelper_qa_weak VALGRIND=memcheck
    # for memory checking
make CppunitTest_cppuhelper_qa_weak DEBUGCPPUNIT=TRUE
    # for exception catching

You can limit the execution to just one particular test by:

make CPPUNIT_TEST_NAME="testXYZ" ...above mentioned params...