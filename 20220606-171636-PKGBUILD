
# 编译时使用的提交: c2cea024a
# 2022-06-06 14:20
# 请使用 makepkg 命令进行编译打包

pkgname=libreoffice-my
pkgver=7.3.3

# pkgrel=1的版本
# https://github.com/Sakura286/TmpShare/blob/main/20220603-123240-PKGBUILD
pkgrel=2
arch=('x86_64')
license=('LGPL3')

# 包组若放在makedepends里会报错，所以需要单独放在groups里
groups=('base-devel')

# 这里的编译依赖源于Document Foundation的wiki
# https://wiki.documentfoundation.org/Development/BuildingOnLinux#Arch_Linux

makedepends=('git' 'ccache' 'ant' 'apr' 'beanshell' 'bluez-libs' 'clucene' \
		'coin-or-mp' 'cppunit' 'curl' 'dbus-glib' \
		'desktop-file-utils' 'doxygen' 'flex' 'gcc-libs' \
		'gdb' 'glm' 'gobject-introspection' 'gperf' 'gpgme' \
		'graphite' 'gst-plugins-base-libs' 'gtk3' \
		'harfbuzz-icu' 'hicolor-icon-theme' 'hunspell' \
		'hyphen' 'icu' 'java-environment' 'junit' \
		'lcms2' 'libabw' 'libatomic_ops' 'libcdr' 'libcmis' \
		'libe-book' 'libepoxy' 'libepubgen' 'libetonyek' \
		'libexttextcat' 'libfreehand' 'libgl' 'libjpeg' \
		'liblangtag' 'libmspub' 'libmwaw' 'libmythes' \
		'libnumbertext' 'libodfgen' 'liborcus' 'libpagemaker' \
		'libqxp' 'libstaroffice' 'libtommath' 'libvisio' \
		'libwpd' 'libwpg' 'libwps' 'libxinerama' 'libxrandr' \
		'libxslt' 'libzmf' 'lpsolve' 'mariadb-libs' \
		'mdds' 'nasm' 'neon' 'nspr' 'nss' 'pango' \
		'plasma-framework' 'poppler' 'postgresql-libs' \
		'python' 'qt5-base' 'redland' 'sane' 'serf' 'sh' \
		'shared-mime-info' 'ttf-liberation' 'unixodbc' \
		'unzip' 'xmlsec' 'zip')

# 这里的依赖源于Arch Linux官方包列表中的libreoffice-fresh
# https://archlinux.org/packages/extra/x86_64/libreoffice-fresh/
# 因为很多选项没有启用，所以可能有大量实际用不上的包（比如neon）

depends=('curl>=7.20.0' 'hunspell>=1.2.8' 'python>=3.7' 'libwpd>=0.9.2' 'libwps' \
		'neon>=0.28.6' 'pango' 'nspr' 'libjpeg' 'libxrandr' 'libgl' \
		'libxslt' 'redland' 'hyphen' 'lpsolve' 'gcc-libs' 'sh' 'graphite' 'icu' \
		'lcms2' 'poppler>=0.24.0' 'libvisio' 'libetonyek' 'libodfgen' 'libcdr' \
		'libmspub' 'harfbuzz-icu' 'nss' 'clucene' 'hicolor-icon-theme' \
		'desktop-file-utils' 'shared-mime-info' 'libpagemaker' \
		'libxinerama' 'libabw' 'libmwaw' 'libe-book' 'libcups' \
		'liblangtag' 'libexttextcat' 'liborcus' \
		'libtommath' 'libzmf' 'libatomic_ops' 'xmlsec' 'gpgme' 'libnumbertext' \
		'libfreehand' 'libstaroffice' 'libepubgen' 'libqxp' 'libepoxy' 'box2d' \
		'zxing-cpp' \
		'xdg-utils')

#
# 在source里使用git下载的语法 - PKGBUILD manual
# https://man.archlinux.org/man/PKGBUILD.5#:~:text=source%3D(%27directory%3A%3Aurl%23fragment%3Fquery%27)
# 其中$pkgname::指定了git clone后的文件夹名字，#之后可以接分支（branch）、标签（tag）或者提交（commit）名称
#
# 注意1：使用makepkg内置的source，无法给git命令提供参数（比如--depth=1），所以如果有需要，可以在prepare()里直接git clone --depth=1
# https://unix.stackexchange.com/questions/373207/how-to-pass-arguments-to-git-from-pkgbuild
# 注意2：如果用引号引起来，$pkgname会被当做单纯的字符串来处理，从而新建出一个叫做$pkgname的文件夹，显然不符合要求
#
# 因为下载速度问题，使用国内的git仓库
# https://www.libreofficechina.org/how-to-build-libreoffice-zh-cn/
# https://www.libreofficechina.org/dev-resources-zh-cn/
#
# 下载了一个desktop.in模板（后面会提到）
#

source=( $pkgname::git://go.suokunlong.cn/lo/core#branch=master \
		https://raw.githubusercontent.com/archlinux/svntogit-packages/packages/libreoffice-fresh/trunk/soffice-template.desktop.in)

sha256sums=( 'SKIP' 'd0be8099cbee3c9dfda694a828149b881c345b204ab68826f317580aafb50879')

prepare() {

	cd $srcdir/$pkgname

	# 用国内源提前下载编译时的依赖包
	wget -r --level=1 -nd -P $srcdir/external_tarballs https://go.suokunlong.cn:88/dl/libreoffice/external_tarballs/

	# 这样就只剩下同时编译的任务数量了
	_MAKEFLAGS=${MAKEFLAGS/-s/}
	_MAKEFLAGS=${_MAKEFLAGS/-j/}

	#
	# 可以使用./autogen.sh --help选项来查看这些选项的含义（英文）
	#
	# --enable-split-app-modules 之后distro-pack-install的前提选项
	#
	# --with-parallelism 启用并行编译，参数可以从MAKEFLAGS里提取
	#
	# --enable-release-build 指明制作的是release版本还是develop版本
	#
	# --prefix --exec-prefix --libdir --sysconfdir指定的是文件的安装位置
	#
	# --with-external-tar 指定了编译时的依赖包的位置，默认是在./external/tarballs位置
	# 为了防止因为文件目录的改变而导致的麻烦，故单独设置了一个临时目录
	# 如果编译时依赖缺失，会自动从外网下载tarball，但是下载点在德国……
	#
	# --disable-fetch-external 因为已经下好了tarball，所以可以禁止联网下载编译时依赖了
	#

	./autogen.sh \
	--enable-split-app-modules \
	--with-parallelism=$_MAKEFLAGS \
	--enable-release-build \
	--prefix=/usr \
	--exec-prefix=/usr \
	--libdir=/usr/lib  \
	--sysconfdir=/etc \
	--mandir=/usr/share/man \
	--with-external-tar="$srcdir/external_tarballs" \
	--disable-fetch-external

}

build() {

	cd $srcdir/$pkgname
	echo BEFOREMAKE
	# 可能是启用的选项比较少，不需要build-nocheck
	make
	echo AFTERMAKE
	# make后生成的文件放在./instdir里，可以正常运行
	# 但是和系统的目录结构存在较大差异，需要使用distro-packinstall进行安装
	make DESTDIR=$srcdir/fakeinstall distro-pack-install

	# 注意，这里不能把DESTDIR设置成$pkgdir
	# 在build阶段不要往$pkgdir里写东西

}

package() {

	# make distro-pack-install已经按照系统目录结构放好对应文件了
	mv $srcdir/fakeinstall/* $pkgdir/

	# 接下来只需要实现一个功能：在文件管理器里右键->创建->文档/演示文稿/表格
	# 为此需要做的工作有：
	# 1. 在/usr/share/templates/.source里放入新建的空白文件（类似于MS Office的Normal模板）
	# 2. 在/usr/share/templates里放入对应的.desktop文件，使得“新建xxx”能在右键菜单出现
	# 参考: https://userbase.kde.org/Adding_an_entry_to_the_Create_New_menu
	# 注意：该方法适用于KDE桌面环境
	#

	# 步骤1
	# 文件夹必须要赋予执行权限方能进入，而文件只需要读（写）权限
	# 故用install -d创建文件夹的时候，赋予的权限要比使用install -v复制文件要+1
	install -dm755 $pkgdir/usr/share/templates/.source
	install -v -m644 $srcdir/$pkgname/extras/source/shellnew/soffice.* \
		$pkgdir/usr/share/templates/.source

	# 步骤2
	# 把.desktop.in模板文件修改成对应的.desktop文件
	template=$pkgdir/usr/share/templates/soffice.@NAME@.desktop
	cat "$srcdir/soffice-template.desktop.in" \
		| sed -e "s/@APP@/Writer/" \
		| sed -e "s/@EXT@/odt/" \
		| sed -e "s/@TYPE@/text/" \
		> $(echo $template | sed -e "s/@NAME@/odt/")
	cat "$srcdir/soffice-template.desktop.in" \
		| sed -e "s/@APP@/Calc/" \
		| sed -e "s/@EXT@/ods/" \
		| sed -e "s/@TYPE@/spreadsheet/" \
		> $(echo $template | sed -e "s/@NAME@/ods/")
	cat "$srcdir/soffice-template.desktop.in" \
		| sed -e "s/@APP@/Inpress/" \
		| sed -e "s/@EXT@/odp/" \
		| sed -e "s/@TYPE@/presentation/" \
		> $(echo $template | sed -e "s/@NAME@/odp/")
	cat "$srcdir/soffice-template.desktop.in" \
		| sed -e "s/@APP@/Draw/" \
		| sed -e "s/@EXT@/odg/" \
		| sed -e "s/@TYPE@/drawing/" \
		> $(echo $template | sed -e "s/@NAME@/odg/")

}
